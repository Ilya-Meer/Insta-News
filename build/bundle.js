!function(n){function r(t){if(e[t])return e[t].exports;var i=e[t]={i:t,l:!1,exports:{}};return n[t].call(i.exports,i,i.exports,r),i.l=!0,i.exports}var e={};r.m=n,r.c=e,r.d=function(n,e,t){r.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:t})},r.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return r.d(e,"a",e),e},r.o=function(n,r){return Object.prototype.hasOwnProperty.call(n,r)},r.p="",r(r.s=0)}([function(n,r,e){"use strict";e(1),$(function(){$("#menu").on("change",function(n){n.preventDefault,$("header").addClass("add-photos"),$(".headlines").empty(),$(".loader-div").append('<img class="loader" src="assets/images/ajax-loader1.gif">');var r=$("#menu option:selected").val(),e="https://api.nytimes.com/svc/topstories/v2/"+r+".json";e+="?"+$.param({"api-key":"1d3d67d37ae24c4a835479a2882cd51d"}),$.ajax({url:e,method:"GET"}).done(function(n){n.results.filter(function(n){if(0!==n.multimedia.length)return n}).splice(0,12).forEach(function(n){var r=n.abstract,e=n.multimedia[n.multimedia.length-1].url,t=n.url;$(".headlines").append('<a class="anchor" style="background-image: url('+e+')" href="'+t+'"><div class="list-image">'+r+"</div></a>"),$(".anchor").on("mouseover",function(){$(this).children().css("visibility","visible")}),$(".anchor").on("mouseleave",function(){$(this).children().css("visibility","hidden")})})}).fail(function(){$(".loader-div").empty(),$(".loader-div").append("<h3>Sorry! There was a problem, please try again!</h3>")}).always(function(){})}),$("select").selectric()})},function(n,r,e){var t=e(2);"string"==typeof t&&(t=[[n.i,t,""]]);var i={hmr:!0};i.transform=void 0;e(4)(t,i);t.locals&&(n.exports=t.locals)},function(n,r,e){r=n.exports=e(3)(!0),r.push([n.i,'.selectric-wrapper{position:relative;cursor:pointer}.selectric-responsive{width:100%}.selectric{border-radius:6px;background:#333745;position:relative}.selectric .label{display:block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;margin:0 38px 0 10px;font-size:12px;line-height:38px;color:#fff;height:38px}.selectric .button{display:block;position:absolute;right:0;top:0;width:38px;height:38px;color:#fff;text-align:center;font:0/0 a;*font:20px/38px Lucida Sans Unicode,Arial Unicode MS,Arial}.selectric .button:after{content:" ";position:absolute;top:0;right:0;bottom:0;left:0;margin:auto;width:0;height:0;border:4px solid transparent;border-top-color:#fff;border-bottom:none}.selectric-focus .selectric{background:#1d2028}.selectric-hover .selectric{background:#282b36}.selectric-hover .selectric .button{color:#e6e6e6}.selectric-hover .selectric .button:after{border-top-color:#e6e6e6}.selectric-open{z-index:9999}.selectric-open .selectric-items{display:block}.selectric-disabled{filter:alpha(opacity=50);opacity:.5;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.selectric-hide-select{position:relative;overflow:hidden;width:0;height:0}.selectric-hide-select select{position:absolute;left:-100%}.selectric-hide-select.selectric-is-native{position:absolute;width:100%;height:100%;z-index:10}.selectric-hide-select.selectric-is-native select{position:absolute;top:0;left:0;right:0;height:100%;width:100%;border:none;z-index:1;box-sizing:border-box;opacity:0}.selectric-input{position:absolute!important;top:0!important;left:0!important;overflow:hidden!important;clip:rect(0,0,0,0)!important;margin:0!important;padding:0!important;width:1px!important;height:1px!important;outline:none!important;border:none!important;*font:0/0 a!important;background:none!important}.selectric-temp-show{position:absolute!important;visibility:hidden!important;display:block!important}.selectric-items{display:none;position:absolute;top:100%;left:0;background:#333745;border:1px solid #c4c4c4;z-index:-1;box-shadow:0 0 10px -6px}.selectric-items .selectric-scroll{height:100%;overflow:auto}.selectric-above .selectric-items{top:auto;bottom:100%}.selectric-items li,.selectric-items ul{list-style:none;padding:0;margin:0;font-size:12px;line-height:20px;min-height:20px}.selectric-items li{display:block;padding:10px;color:#fff;cursor:pointer}.selectric-items li.selected{background:#5c5f6a;color:#fff}.selectric-items li.highlighted{background:#474b58;color:#fff}.selectric-items li:hover{background:#70737d;color:#fff}.selectric-items .disabled{filter:alpha(opacity=50);opacity:.5;cursor:default!important;background:none!important;color:#fff!important}.selectric-items .disabled,.selectric-items .selectric-group .selectric-group-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.selectric-items .selectric-group .selectric-group-label{font-weight:700;padding-left:10px;cursor:default;background:none;color:#fff}.selectric-items .selectric-group.disabled li{filter:alpha(opacity=100);opacity:1}.selectric-items .selectric-group li{padding-left:25px}a,abbr,acronym,address,applet,article,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:after,blockquote:before,q:after,q:before{content:"";content:none}table{border-collapse:collapse;border-spacing:0}@font-face{font-family:Open Sans;src:url("/assets/fonts/OpenSans-Light.eot");src:url("/assets/fonts/OpenSans-Light.eot?#iefix") format("embedded-opentype"),url("/assets/fonts/OpenSans-Light.woff2") format("woff2"),url("/assets/fonts/OpenSans-Light.woff") format("woff"),url("/assets/fonts/OpenSans-Light.ttf") format("truetype"),url("/assets/fonts/OpenSans-Light.svg#OpenSans-Light") format("svg");font-weight:300;font-style:normal}@font-face{font-family:Open Sans;src:url("/assets/fonts/OpenSansLight-Italic.eot");src:url("/assets/fonts/OpenSansLight-Italic.eot?#iefix") format("embedded-opentype"),url("/assets/fonts/OpenSansLight-Italic.woff2") format("woff2"),url("/assets/fonts/OpenSansLight-Italic.woff") format("woff"),url("/assets/fonts/OpenSansLight-Italic.ttf") format("truetype"),url("/assets/fonts/OpenSansLight-Italic.svg#OpenSansLight-Italic") format("svg");font-weight:300;font-style:italic}*{box-sizing:border-box}.main{display:flex;flex-flow:column wrap;justify-content:center;align-items:center;height:500px;margin:25px auto}.main img{height:300px}.instructions{margin-top:20px;text-align:center}.instructions p{padding-bottom:10px}.add-photos{display:flex;flex-flow:column wrap;justify-content:center;align-items:center;height:auto;margin:10px auto;transition:all 1s ease-in-out 0s}.add-photos img{height:150px}@media (min-width:600px){.main{display:grid;grid-template-columns:1fr 5fr;margin-left:130px}.instructions{grid-column:2/3;display:flex;flex-flow:column wrap;justify-content:flex-start;width:160px;margin-left:40px}.instructions p{padding-bottom:10px}.add-photos{height:auto;margin:10px auto;padding-left:40px}.add-photos img{height:80px;margin-top:10px;margin-left:100px}}@media (min-width:1000px){.main{display:grid;grid-template-columns:1fr 5fr;margin-left:10px}.add-photos{height:auto;padding:0}.add-photos img{height:80px;margin-top:10px;margin-left:0;margin-right:20px}.instructions{grid-column:2/3;display:flex;flex-flow:column wrap;justify-content:flex-start;width:180px;margin-left:30px;padding-left:30px}}body{font-size:16px;color:#fff;font-family:Open Sans,Arial,Helvetica,sans-serif;font-weight:300;background-color:#000}select{width:100px;margin:20px auto}.loader-div{display:flex;flex-flow:row wrap;justify-content:center;align-items:center}.loader{width:50px;height:50px}h3{font-style:italic}.list-image{background:rgba(50,50,50,.5);color:#fff;visibility:hidden}.headlines{width:100%}.headlines a{background-repeat:no-repeat;background-size:cover;text-decoration:none;height:100vw;width:100%;display:flex;flex-flow:column wrap;justify-content:flex-end}@media (min-width:600px){.headlines{width:100%;display:grid;grid-template-columns:1fr 1fr}.headlines a{height:50vw}}@media (min-width:1000px){.headlines{width:100%;display:grid;grid-template-columns:1fr 1fr 1fr 1fr}.headlines a{height:25vw}}footer{display:flex;flex-flow:column wrap;justify-content:center;align-items:center}footer p{margin-top:30px;margin-bottom:30px;color:#c2c2c2}.copyright{text-transform:uppercase}@media (min-width:1000px){footer{justify-content:flex-start;align-items:flex-start;margin-left:20px}}',"",{version:3,sources:["D:/Ilya M/HTML Learning/RED/Project-2/sass/sass/_selectric.scss","D:/Ilya M/HTML Learning/RED/Project-2/sass/sass/_reset.scss","D:/Ilya M/HTML Learning/RED/Project-2/sass/sass/_fonts.scss","D:/Ilya M/HTML Learning/RED/Project-2/sass/sass/_globals.scss","D:/Ilya M/HTML Learning/RED/Project-2/sass/sass/_header.scss","D:/Ilya M/HTML Learning/RED/Project-2/sass/sass/_content.scss","D:/Ilya M/HTML Learning/RED/Project-2/sass/sass/_footer.scss"],names:[],mappings:"AAGA,mBACE,kBACA,cAAe,CAChB,sBAGC,UAAW,CACZ,WAGC,kBACA,mBACA,iBAAkB,CAKnB,kBAGC,cACA,mBACA,gBACA,uBACA,qBACA,eACA,iBACA,WACA,WAAY,CACb,mBAGC,cACA,kBACA,QACA,MACA,WACA,YACA,WACA,kBACA,WACA,CAAA,yDAA6D,CAC9D,yBAGC,YACA,kBACA,MACA,QACA,SACA,OACA,YACA,QACA,SACA,6BACA,sBACA,kBAAmB,CACpB,4BAGC,kBAAmB,CACpB,4BAGC,kBAAmB,CACpB,oCAGC,aAAc,CACf,0CAGC,wBAAyB,CAC1B,gBAGC,YAAa,CACd,iCAGC,aAAc,CACf,oBAGC,yBACA,WACA,eACA,yBACG,sBACC,qBACI,gBAAiB,CAC1B,uBAGC,kBACA,gBACA,QACA,QAAS,CACV,8BAGC,kBACA,UAAW,CACZ,2CAGC,kBACA,WACA,YACA,UAAW,CACZ,kDAGC,kBACA,MACA,OACA,QACA,YACA,WACA,YACA,UACA,sBACA,SAAU,CACX,iBAGC,4BACA,gBACA,iBACA,0BACA,6BACA,mBACA,oBACA,oBACA,qBACA,uBACA,sBACA,CAAA,qBACA,yBAA2B,CAC5B,qBAGC,4BACA,4BACA,uBAAyB,CAC1B,iBAIC,aACA,kBACA,SACA,OACA,mBACA,yBACA,WACA,wBAAyB,CAK1B,mCAGC,YACA,aAAc,CACf,kCAGC,SACA,WAAY,CACb,wCAGC,gBACA,UACA,SACA,eACA,iBACA,eAAgB,CACjB,oBAGC,cACA,aACA,WACA,cAAe,CAChB,6BAGC,mBACA,UAAW,CACZ,gCAGC,mBACA,UAAW,CACZ,0BAGC,mBACA,UAAW,CACZ,2BAGC,yBACA,WACA,yBACA,0BACA,oBACA,CAID,oFAJC,yBACG,sBACC,qBACI,gBAAiB,CAa1B,AAZA,yDAGC,gBACA,kBACA,eACA,AAIA,gBACA,UAAW,CACZ,8CAGC,0BACA,SAAU,CACX,qCAGC,iBAAkB,CACnB,2ZC5NA,SACA,UACA,SACA,eACA,aACA,uBAAwB,CACxB,8EAIA,aAAc,CACd,KAEA,aAAc,CACd,MAEA,eAAgB,CAChB,aAEA,WAAY,CACZ,oDAGA,WACA,YAAa,CACb,MAEA,yBACA,gBAAiB,CACjB,WC5CA,sBACA,4CACA,iUAKA,gBACA,iBAAkB,CAGnB,WACC,sBACA,kDACA,qWAKA,gBACA,iBAAkB,CCvBnB,EACE,qBAAsB,CACvB,MCAC,aACA,sBACA,uBACA,mBACA,aACA,gBAAiB,CANnB,UASI,YAAa,CACd,cAID,gBACA,iBAAkB,CAFpB,gBAKK,mBAAoB,CACrB,YAIF,aACA,sBACA,uBACA,mBACA,YACA,iBACA,gCAAiC,CAPnC,gBAUI,YAAa,CACd,yBAOC,MACE,aACA,8BACA,iBAAkB,CACnB,cAGC,gBACA,aACA,sBACA,2BACA,YACA,gBAAiB,CANnB,gBASK,mBAAoB,CACrB,YAKF,YACA,iBACA,iBAAkB,CAHnB,gBAMG,YACA,gBACA,iBAAkB,CACnB,CAKP,0BAEE,MACI,aACA,8BACA,gBAAiB,CACpB,YAGC,YACA,SAAU,CAFZ,gBAKI,YACA,gBACA,cACA,iBAAkB,CACnB,cAKC,gBACA,aACA,sBACA,2BACA,YACA,iBACA,iBAAkB,CAErB,CCxGH,KACE,eACA,WACA,iDACA,gBACA,qBAAuB,CACxB,OAGC,YACA,gBAAiB,CAClB,YAIC,aACA,mBACA,uBACA,kBAAmB,CACpB,QAGC,WACA,WAAY,CACZ,GAGA,iBAAkB,CACnB,YAIC,6BACA,WACA,iBAAkB,CACnB,WAGC,UAAW,CADb,aAII,4BACA,sBACA,qBACA,aACA,WACA,aACA,sBACA,wBAAyB,CAE1B,yBASD,WACE,WACA,aACA,6BAA8B,CAHhC,aAMI,WAAY,CACb,CAKL,0BACE,WACE,WACA,aACA,qCAAsC,CAHxC,aAMI,WAAY,CACb,CChFL,OACE,aACA,sBACA,uBACA,kBAAmB,CAEpB,SAGC,gBACA,mBACA,aAAc,CACf,WAGC,wBAAyB,CAC1B,0BAKG,OACE,2BACA,uBACA,gBAAiB,CAClB,CAAA",file:"style.scss",sourcesContent:['/*======================================\r\n  Selectric\r\n======================================*/\r\n.selectric-wrapper {\r\n  position: relative;\r\n  cursor: pointer;\r\n}\r\n\r\n.selectric-responsive {\r\n  width: 100%;\r\n}\r\n\r\n.selectric {\r\n  border-radius: 6px;\r\n  background: #333745;\r\n  position: relative;\r\n  \r\n  // @media screen and (min-width: 1000px) {\r\n  //   margin: 0 50px;\r\n  // }\r\n}\r\n\r\n.selectric .label {\r\n  display: block;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  margin: 0 38px 0 10px;\r\n  font-size: 12px;\r\n  line-height: 38px;\r\n  color: #FFF;\r\n  height: 38px;\r\n}\r\n\r\n.selectric .button {\r\n  display: block;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  width: 38px;\r\n  height: 38px;\r\n  color: #FFF;\r\n  text-align: center;\r\n  font: 0/0 a;\r\n  *font: 20px/38px Lucida Sans Unicode, Arial Unicode MS, Arial;\r\n}\r\n\r\n.selectric .button:after {\r\n  content: " ";\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  margin: auto;\r\n  width: 0;\r\n  height: 0;\r\n  border: 4px solid transparent;\r\n  border-top-color: #FFF;\r\n  border-bottom: none;\r\n}\r\n\r\n.selectric-focus .selectric {\r\n  background: #1d2028;\r\n}\r\n\r\n.selectric-hover .selectric {\r\n  background: #282b36;\r\n}\r\n\r\n.selectric-hover .selectric .button {\r\n  color: #e6e6e6;\r\n}\r\n\r\n.selectric-hover .selectric .button:after {\r\n  border-top-color: #e6e6e6;\r\n}\r\n\r\n.selectric-open {\r\n  z-index: 9999;\r\n}\r\n\r\n.selectric-open .selectric-items {\r\n  display: block;\r\n}\r\n\r\n.selectric-disabled {\r\n  filter: alpha(opacity=50);\r\n  opacity: 0.5;\r\n  cursor: default;\r\n  -webkit-user-select: none;\r\n     -moz-user-select: none;\r\n      -ms-user-select: none;\r\n          user-select: none;\r\n}\r\n\r\n.selectric-hide-select {\r\n  position: relative;\r\n  overflow: hidden;\r\n  width: 0;\r\n  height: 0;\r\n}\r\n\r\n.selectric-hide-select select {\r\n  position: absolute;\r\n  left: -100%;\r\n}\r\n\r\n.selectric-hide-select.selectric-is-native {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: 10;\r\n}\r\n\r\n.selectric-hide-select.selectric-is-native select {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 100%;\r\n  width: 100%;\r\n  border: none;\r\n  z-index: 1;\r\n  box-sizing: border-box;\r\n  opacity: 0;\r\n}\r\n\r\n.selectric-input {\r\n  position: absolute !important;\r\n  top: 0 !important;\r\n  left: 0 !important;\r\n  overflow: hidden !important;\r\n  clip: rect(0, 0, 0, 0) !important;\r\n  margin: 0 !important;\r\n  padding: 0 !important;\r\n  width: 1px !important;\r\n  height: 1px !important;\r\n  outline: none !important;\r\n  border: none !important;\r\n  *font: 0/0 a !important;\r\n  background: none !important;\r\n}\r\n\r\n.selectric-temp-show {\r\n  position: absolute !important;\r\n  visibility: hidden !important;\r\n  display: block !important;\r\n}\r\n\r\n/* Items box */\r\n.selectric-items {\r\n  display: none;\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 0;\r\n  background: #333745;\r\n  border: 1px solid #c4c4c4;\r\n  z-index: -1;\r\n  box-shadow: 0 0 10px -6px;\r\n\r\n  // @media screen and (min-width: 1000px) {\r\n  //   margin-left: 50px;\r\n  // }\r\n}\r\n\r\n.selectric-items .selectric-scroll {\r\n  height: 100%;\r\n  overflow: auto;\r\n}\r\n\r\n.selectric-above .selectric-items {\r\n  top: auto;\r\n  bottom: 100%;\r\n}\r\n\r\n.selectric-items ul, .selectric-items li {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  font-size: 12px;\r\n  line-height: 20px;\r\n  min-height: 20px;\r\n}\r\n\r\n.selectric-items li {\r\n  display: block;\r\n  padding: 10px;\r\n  color: #FFF;\r\n  cursor: pointer;\r\n}\r\n\r\n.selectric-items li.selected {\r\n  background: #5c5f6a;\r\n  color: #FFF;\r\n}\r\n\r\n.selectric-items li.highlighted {\r\n  background: #474b58;\r\n  color: #FFF;\r\n}\r\n\r\n.selectric-items li:hover {\r\n  background: #70737d;\r\n  color: #FFF;\r\n}\r\n\r\n.selectric-items .disabled {\r\n  filter: alpha(opacity=50);\r\n  opacity: 0.5;\r\n  cursor: default !important;\r\n  background: none !important;\r\n  color: #FFF !important;\r\n  -webkit-user-select: none;\r\n     -moz-user-select: none;\r\n      -ms-user-select: none;\r\n          user-select: none;\r\n}\r\n\r\n.selectric-items .selectric-group .selectric-group-label {\r\n  font-weight: bold;\r\n  padding-left: 10px;\r\n  cursor: default;\r\n  -webkit-user-select: none;\r\n     -moz-user-select: none;\r\n      -ms-user-select: none;\r\n          user-select: none;\r\n  background: none;\r\n  color: #FFF;\r\n}\r\n\r\n.selectric-items .selectric-group.disabled li {\r\n  filter: alpha(opacity=100);\r\n  opacity: 1;\r\n}\r\n\r\n.selectric-items .selectric-group li {\r\n  padding-left: 25px;\r\n}\r\n',"/* http://meyerweb.com/eric/tools/css/reset/ \r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\n\r\n/* END RESET */\r\n\r\n","/* This stylesheet generated by Transfonter (https://transfonter.org) on October 16, 2017 7:52 PM */\r\n\r\n@font-face {\r\n\tfont-family: 'Open Sans';\r\n\tsrc: url('/assets/fonts/OpenSans-Light.eot');\r\n\tsrc: url('/assets/fonts/OpenSans-Light.eot?#iefix') format('embedded-opentype'),\r\n\t\turl('/assets/fonts/OpenSans-Light.woff2') format('woff2'),\r\n\t\turl('/assets/fonts/OpenSans-Light.woff') format('woff'),\r\n\t\turl('/assets/fonts/OpenSans-Light.ttf') format('truetype'),\r\n\t\turl('/assets/fonts/OpenSans-Light.svg#OpenSans-Light') format('svg');\r\n\tfont-weight: 300;\r\n\tfont-style: normal;\r\n}\r\n\r\n@font-face {\r\n\tfont-family: 'Open Sans';\r\n\tsrc: url('/assets/fonts/OpenSansLight-Italic.eot');\r\n\tsrc: url('/assets/fonts/OpenSansLight-Italic.eot?#iefix') format('embedded-opentype'),\r\n\t\turl('/assets/fonts/OpenSansLight-Italic.woff2') format('woff2'),\r\n\t\turl('/assets/fonts/OpenSansLight-Italic.woff') format('woff'),\r\n\t\turl('/assets/fonts/OpenSansLight-Italic.ttf') format('truetype'),\r\n\t\turl('/assets/fonts/OpenSansLight-Italic.svg#OpenSansLight-Italic') format('svg');\r\n\tfont-weight: 300;\r\n\tfont-style: italic;\r\n}\r\n\r\n\r\n\r\n\r\n","* {\r\n  box-sizing: border-box;\r\n}\r\n","\r\n.main {\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 500px;\r\n  margin: 25px auto;\r\n\r\n  img {\r\n    height: 300px;\r\n  }\r\n}\r\n\r\n.instructions {\r\n  margin-top: 20px;\r\n  text-align: center;\r\n\r\n   p {\r\n     padding-bottom: 10px;\r\n   }\r\n}\r\n\r\n.add-photos {\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: auto;\r\n  margin: 10px auto;\r\n  transition: all 1s ease-in-out 0s;\r\n\r\n  img {\r\n    height: 150px;\r\n  }\r\n}\r\n\r\n\r\n@media all and (min-width: 600px) {\r\n  \r\n  \r\n    .main {\r\n      display: grid;\r\n      grid-template-columns: 1fr 5fr;    \r\n      margin-left: 130px;\r\n    }\r\n  \r\n    .instructions {\r\n      grid-column: 2 / 3;\r\n      display: flex;\r\n      flex-flow: column wrap;\r\n      justify-content: flex-start;\r\n      width: 160px;\r\n      margin-left: 40px;\r\n\r\n       p {\r\n         padding-bottom: 10px;\r\n       }\r\n    }\r\n\r\n    \r\n     .add-photos {\r\n      height: auto;\r\n      margin: 10px auto;\r\n      padding-left: 40px;\r\n    \r\n      img {\r\n        height: 80px;\r\n        margin-top: 10px;\r\n        margin-left: 100px;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n@media all and (min-width: 1000px) {\r\n  \r\n  .main {\r\n      display: grid;\r\n      grid-template-columns: 1fr 5fr;    \r\n      margin-left: 10px;\r\n  }\r\n\r\n  .add-photos {\r\n    height: auto;\r\n    padding: 0;\r\n  \r\n    img {\r\n      height: 80px;\r\n      margin-top: 10px;\r\n      margin-left: 0;\r\n      margin-right: 20px;\r\n    }\r\n  }\r\n\r\n\r\n  .instructions {\r\n      grid-column: 2 / 3;\r\n      display: flex;\r\n      flex-flow: column wrap;\r\n      justify-content: flex-start;\r\n      width: 180px;\r\n      margin-left: 30px;\r\n      padding-left: 30px; \r\n      \r\n  }\r\n\r\n}  ","\r\nbody {\r\n  font-size: 16px;\r\n  color: white;\r\n  font-family: 'Open Sans', Arial, Helvetica, sans-serif;\r\n  font-weight: 300;\r\n  background-color: black;\r\n}\r\n\r\nselect {\r\n  width: 100px;\r\n  margin: 20px auto;\r\n}\r\n\r\n\r\n.loader-div {\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.loader {\r\n  width: 50px;\r\n  height: 50px;\r\n }\r\n\r\n h3 {\r\n  font-style: italic;\r\n}\r\n\r\n\r\n.list-image {\r\n  background: $captionBackground;\r\n  color: white;\r\n  visibility: hidden;\r\n}\r\n\r\n.headlines {\r\n  width: 100%;\r\n\r\n   a {\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    text-decoration: none;\r\n    height: 100vw;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-flow: column wrap;\r\n    justify-content: flex-end;\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n@media all and (min-width: 600px) {\r\n   \r\n  .headlines {\r\n    width: 100%;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n\r\n    a {\r\n      height: 50vw;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n@media all and (min-width: 1000px) {\r\n  .headlines {\r\n    width: 100%;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr 1fr;\r\n\r\n    a {\r\n      height: 25vw;\r\n    }\r\n   \r\n\r\n  }\r\n\r\n}\r\n\r\n","footer {  \r\n  display: flex;\r\n  flex-flow: column wrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  \r\n}\r\n\r\nfooter p {\r\n  margin-top: 30px;\r\n  margin-bottom: 30px;\r\n  color: #c2c2c2;\r\n}\r\n\r\n.copyright {\r\n  text-transform: uppercase;\r\n}\r\n\r\n\r\n@media all and (min-width: 1000px) {\r\n  \r\n    footer {\r\n      justify-content: flex-start;\r\n      align-items: flex-start;\r\n      margin-left: 20px;\r\n    }\r\n\r\n}"],sourceRoot:""}])},function(n,r){function e(n,r){var e=n[1]||"",i=n[3];if(!i)return e;if(r&&"function"==typeof btoa){var o=t(i);return[e].concat(i.sources.map(function(n){return"/*# sourceURL="+i.sourceRoot+n+" */"})).concat([o]).join("\n")}return[e].join("\n")}function t(n){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"}n.exports=function(n){var r=[];return r.toString=function(){return this.map(function(r){var t=e(r,n);return r[2]?"@media "+r[2]+"{"+t+"}":t}).join("")},r.i=function(n,e){"string"==typeof n&&(n=[[null,n,""]]);for(var t={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(t[o]=!0)}for(i=0;i<n.length;i++){var s=n[i];"number"==typeof s[0]&&t[s[0]]||(e&&!s[2]?s[2]=e:e&&(s[2]="("+s[2]+") and ("+e+")"),r.push(s))}},r}},function(n,r,e){function t(n,r){for(var e=0;e<n.length;e++){var t=n[e],i=u[t.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](t.parts[o]);for(;o<t.parts.length;o++)i.parts.push(A(t.parts[o],r))}else{for(var s=[],o=0;o<t.parts.length;o++)s.push(A(t.parts[o],r));u[t.id]={id:t.id,refs:1,parts:s}}}}function i(n,r){for(var e=[],t={},i=0;i<n.length;i++){var o=n[i],s=r.base?o[0]+r.base:o[0],a=o[1],l=o[2],c=o[3],A={css:a,media:l,sourceMap:c};t[s]?t[s].parts.push(A):e.push(t[s]={id:s,parts:[A]})}return e}function o(n,r){var e=m(n.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var t=b[b.length-1];if("top"===n.insertAt)t?t.nextSibling?e.insertBefore(r,t.nextSibling):e.appendChild(r):e.insertBefore(r,e.firstChild),b.push(r);else if("bottom"===n.insertAt)e.appendChild(r);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=m(n.insertInto+" "+n.insertAt.before);e.insertBefore(r,i)}}function s(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var r=b.indexOf(n);r>=0&&b.splice(r,1)}function a(n){var r=document.createElement("style");return n.attrs.type="text/css",c(r,n.attrs),o(n,r),r}function l(n){var r=document.createElement("link");return n.attrs.type="text/css",n.attrs.rel="stylesheet",c(r,n.attrs),o(n,r),r}function c(n,r){Object.keys(r).forEach(function(e){n.setAttribute(e,r[e])})}function A(n,r){var e,t,i,o;if(r.transform&&n.css){if(!(o=r.transform(n.css)))return function(){};n.css=o}if(r.singleton){var c=g++;e=h||(h=a(r)),t=p.bind(null,e,c,!1),i=p.bind(null,e,c,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=l(r),t=d.bind(null,e,r),i=function(){s(e),e.href&&URL.revokeObjectURL(e.href)}):(e=a(r),t=f.bind(null,e),i=function(){s(e)});return t(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap)return;t(n=r)}else i()}}function p(n,r,e,t){var i=e?"":t.css;if(n.styleSheet)n.styleSheet.cssText=x(r,i);else{var o=document.createTextNode(i),s=n.childNodes;s[r]&&n.removeChild(s[r]),s.length?n.insertBefore(o,s[r]):n.appendChild(o)}}function f(n,r){var e=r.css,t=r.media;if(t&&n.setAttribute("media",t),n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}function d(n,r,e){var t=e.css,i=e.sourceMap,o=void 0===r.convertToAbsoluteUrls&&i;(r.convertToAbsoluteUrls||o)&&(t=B(t)),i&&(t+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var s=new Blob([t],{type:"text/css"}),a=n.href;n.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}var u={},C=function(n){var r;return function(){return void 0===r&&(r=n.apply(this,arguments)),r}}(function(){return window&&document&&document.all&&!window.atob}),m=function(n){var r={};return function(e){if(void 0===r[e]){var t=n.call(this,e);if(t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}r[e]=t}return r[e]}}(function(n){return document.querySelector(n)}),h=null,g=0,b=[],B=e(5);n.exports=function(n,r){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");r=r||{},r.attrs="object"==typeof r.attrs?r.attrs:{},r.singleton||(r.singleton=C()),r.insertInto||(r.insertInto="head"),r.insertAt||(r.insertAt="bottom");var e=i(n,r);return t(e,r),function(n){for(var o=[],s=0;s<e.length;s++){var a=e[s],l=u[a.id];l.refs--,o.push(l)}if(n){t(i(n,r),r)}for(var s=0;s<o.length;s++){var l=o[s];if(0===l.refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete u[l.id]}}}};var x=function(){var n=[];return function(r,e){return n[r]=e,n.filter(Boolean).join("\n")}}()},function(n,r){n.exports=function(n){var r="undefined"!=typeof window&&window.location;if(!r)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var e=r.protocol+"//"+r.host,t=e+r.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,r){var i=r.trim().replace(/^"(.*)"$/,function(n,r){return r}).replace(/^'(.*)'$/,function(n,r){return r});if(/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(i))return n;var o;return o=0===i.indexOf("//")?i:0===i.indexOf("/")?e+i:t+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")"})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYnVpbGQvYnVuZGxlLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCBkZDI1YWM4MTAzZjY4Zjg1YWI1NCIsIndlYnBhY2s6Ly8vLi9qcy9zY3JpcHQuanMiLCJ3ZWJwYWNrOi8vLy4vc2Fzcy9zdHlsZS5zY3NzPzlhOTIiLCJ3ZWJwYWNrOi8vLy4vc2Fzcy9zdHlsZS5zY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyJdLCJuYW1lcyI6WyJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiJCIsIm9uIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImFkZENsYXNzIiwiZW1wdHkiLCJhcHBlbmQiLCJzZWxlY3RlZCIsInZhbCIsInVybCIsInBhcmFtIiwiYXBpLWtleSIsImFqYXgiLCJtZXRob2QiLCJkb25lIiwiZGF0YSIsInJlc3VsdHMiLCJmaWx0ZXIiLCJpdGVtIiwibXVsdGltZWRpYSIsImxlbmd0aCIsInNwbGljZSIsImZvckVhY2giLCJ0aXRsZSIsImFic3RyYWN0IiwiaW1hZ2UiLCJ0aGlzIiwiY2hpbGRyZW4iLCJjc3MiLCJmYWlsIiwiYWx3YXlzIiwic2VsZWN0cmljIiwiY29udGVudCIsIm9wdGlvbnMiLCJobXIiLCJ0cmFuc2Zvcm0iLCJsb2NhbHMiLCJwdXNoIiwidmVyc2lvbiIsInNvdXJjZXMiLCJuYW1lcyIsIm1hcHBpbmdzIiwiZmlsZSIsInNvdXJjZXNDb250ZW50Iiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJ1c2VTb3VyY2VNYXAiLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJ0b0NvbW1lbnQiLCJjb25jYXQiLCJtYXAiLCJzb3VyY2UiLCJqb2luIiwic291cmNlTWFwIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwibGlzdCIsInRvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJpZCIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwiZG9tU3R5bGUiLCJzdHlsZXNJbkRvbSIsInJlZnMiLCJqIiwicGFydHMiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsIm5ld1N0eWxlcyIsImJhc2UiLCJtZWRpYSIsInBhcnQiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsInRhcmdldCIsImdldEVsZW1lbnQiLCJpbnNlcnRJbnRvIiwiRXJyb3IiLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaWR4IiwiaW5kZXhPZiIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImF0dHJzIiwidHlwZSIsImFkZEF0dHJzIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJsaW5rIiwicmVsIiwiZWwiLCJrZXlzIiwia2V5Iiwic2V0QXR0cmlidXRlIiwib2JqIiwidXBkYXRlIiwicmVtb3ZlIiwicmVzdWx0Iiwic2luZ2xldG9uIiwic3R5bGVJbmRleCIsInNpbmdsZXRvbkNvdW50ZXIiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiYmluZCIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJ1cGRhdGVMaW5rIiwiaHJlZiIsImFwcGx5VG9UYWciLCJuZXdPYmoiLCJpbmRleCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwicmVwbGFjZVRleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwiYXV0b0ZpeFVybHMiLCJ1bmRlZmluZWQiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJmaXhVcmxzIiwiYmxvYiIsIm9sZFNyYyIsImlzT2xkSUUiLCJmbiIsIm1lbW8iLCJhcHBseSIsImFyZ3VtZW50cyIsIndpbmRvdyIsImFsbCIsImF0b2IiLCJzZWxlY3RvciIsInN0eWxlVGFyZ2V0IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInF1ZXJ5U2VsZWN0b3IiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlbWVudCIsIkJvb2xlYW4iLCJsb2NhdGlvbiIsImJhc2VVcmwiLCJwcm90b2NvbCIsImhvc3QiLCJjdXJyZW50RGlyIiwicGF0aG5hbWUiLCJyZXBsYWNlIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsInVucXVvdGVkT3JpZ1VybCIsInRyaW0iLCIkMSIsInRlc3QiLCJuZXdVcmwiXSwibWFwcGluZ3MiOiJDQUFTLFNBQVVBLEdDSW5CLFFBQUFDLEdBQUFDLEdBR0EsR0FBQUMsRUFBQUQsR0FDQSxNQUFBQyxHQUFBRCxHQUFBRSxPQUdBLElBQUFDLEdBQUFGLEVBQUFELElBQ0FJLEVBQUFKLEVBQ0FLLEdBQUEsRUFDQUgsV0FVQSxPQU5BSixHQUFBRSxHQUFBTSxLQUFBSCxFQUFBRCxRQUFBQyxJQUFBRCxRQUFBSCxHQUdBSSxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBdkJBLEdBQUFELEtBNEJBRixHQUFBUSxFQUFBVCxFQUdBQyxFQUFBUyxFQUFBUCxFQUdBRixFQUFBVSxFQUFBLFNBQUFQLEVBQUFRLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFWLEVBQUFRLElBQ0FHLE9BQUFDLGVBQUFaLEVBQUFRLEdBQ0FLLGNBQUEsRUFDQUMsWUFBQSxFQUNBQyxJQUFBTixLQU1BWixFQUFBbUIsRUFBQSxTQUFBZixHQUNBLEdBQUFRLEdBQUFSLEtBQUFnQixXQUNBLFdBQTJCLE1BQUFoQixHQUFBLFNBQzNCLFdBQWlDLE1BQUFBLEdBRWpDLE9BREFKLEdBQUFVLEVBQUFFLEVBQUEsSUFBQUEsR0FDQUEsR0FJQVosRUFBQWEsRUFBQSxTQUFBUSxFQUFBQyxHQUFzRCxNQUFBUixRQUFBUyxVQUFBQyxlQUFBakIsS0FBQWMsRUFBQUMsSUFHdER0QixFQUFBeUIsRUFBQSxHQUdBekIsSUFBQTBCLEVBQUEsS0RNTSxTQUFVdEIsRUFBUUQsRUFBU0gsR0FFakMsWUVyRUFBLEdBQUEsR0FFQTJCLEVBQUUsV0FNQUEsRUFBRSxTQUFTQyxHQUFHLFNBQVUsU0FBVUMsR0FDaENBLEVBQU1DLGVBQ05ILEVBQUUsVUFBVUksU0FBUyxjQUNyQkosRUFBRSxjQUFjSyxRQUNoQkwsRUFBRSxlQUFlTSxPQUFPLDREQUl4QixJQUFJQyxHQUFXUCxFQUFFLHlCQUF5QlEsTUFDdENDLEVBQU0sNkNBQStDRixFQUFXLE9BQ3BFRSxJQUFPLElBQU1ULEVBQUVVLE9BQVFDLFVBQVcscUNBUWxDWCxFQUFFWSxNQUNBSCxJQUFLQSxFQUNMSSxPQUFRLFFBRVBDLEtBQUssU0FBVUMsR0FDZEEsRUFBS0MsUUFBUUMsT0FBTyxTQUFVQyxHQUM1QixHQUErQixJQUEzQkEsRUFBS0MsV0FBV0MsT0FDbEIsTUFBT0YsS0FFUkcsT0FBTyxFQUFHLElBQUlDLFFBQVEsU0FBVUosR0FDakMsR0FBSUssR0FBUUwsRUFBS00sU0FDYkMsRUFBUVAsRUFBS0MsV0FBV0QsRUFBS0MsV0FBV0MsT0FBUyxHQUFHWCxJQUNwREEsRUFBTVMsRUFBS1QsR0FDZlQsR0FBRSxjQUFjTSxPQUFPLGtEQUFvRG1CLEVBQVEsWUFBY2hCLEVBQU0sNkJBQXlDYyxFQUFRLGNBSXhKdkIsRUFBRSxXQUFXQyxHQUFHLFlBQWEsV0FDM0JELEVBQUUwQixNQUFNQyxXQUFXQyxJQUFJLGFBQWMsYUFFdkM1QixFQUFFLFdBQVdDLEdBQUcsYUFBYyxXQUM1QkQsRUFBRTBCLE1BQU1DLFdBQVdDLElBQUksYUFBYyxnQkFPNUNDLEtBQUssV0FDSjdCLEVBQUUsZUFBZUssUUFDakJMLEVBQUUsZUFBZU0sT0FBTyw0REFFdkJ3QixPQUFPLGdCQVFaOUIsRUFBRSxVQUFVK0IsZUZ5RVIsU0FBVXRELEVBQVFELEVBQVNILEdHeElqQyxHQUFBMkQsR0FBQTNELEVBQUEsRUFDQSxpQkFBQTJELFNBQUF2RCxFQUFBQyxFQUFBc0QsRUFBQSxLQUVBLElBRUFDLElBQWVDLEtBQUEsRUFDZkQsR0FBQUUsY0FIQUEsRUFLQTlELEdBQUEsR0FBQTJELEVBQUFDLEVBQ0FELEdBQUFJLFNBQUEzRCxFQUFBRCxRQUFBd0QsRUFBQUksU0g4Sk0sU0FBVTNELEVBQVFELEVBQVNILEdJMUtqQ0csRUFBQUMsRUFBQUQsUUFBQUgsRUFBQSxPQUtBRyxFQUFBNkQsTUFBQTVELEVBQUFDLEVBQUEsczNOQUE2N04sSUFBUTRELFFBQUEsRUFBQUMsU0FBQSw2YkFBQUMsU0FBQUMsU0FBQSxpeUVBQUFDLEtBQUEsYUFBQUMsZ0JBQUEsOHhKQUEya1AsaXdDQUFzdUMsMnFDQUFzckMsNENBQTRELG81REFBczVELDJ6Q0FBcXpDLG9kQUEyZEMsV0FBQSxPSm1MeG9wQixTQUFVbkUsRUFBUUQsR0t2SXhCLFFBQUFxRSxHQUFBM0IsRUFBQTRCLEdBQ0EsR0FBQWQsR0FBQWQsRUFBQSxPQUNBNkIsRUFBQTdCLEVBQUEsRUFDQSxLQUFBNkIsRUFDQSxNQUFBZixFQUdBLElBQUFjLEdBQUEsa0JBQUFFLE1BQUEsQ0FDQSxHQUFBQyxHQUFBQyxFQUFBSCxFQUtBLFFBQUFmLEdBQUFtQixPQUpBSixFQUFBUixRQUFBYSxJQUFBLFNBQUFDLEdBQ0EsdUJBQUFOLEVBQUFILFdBQUFTLEVBQUEsU0FHQUYsUUFBQUYsSUFBQUssS0FBQSxNQUdBLE9BQUF0QixHQUFBc0IsS0FBQSxNQUlBLFFBQUFKLEdBQUFLLEdBS0EseUVBSEFQLEtBQUFRLFNBQUFDLG1CQUFBQyxLQUFBQyxVQUFBSixNQUdBLE1BckVBOUUsRUFBQUQsUUFBQSxTQUFBc0UsR0FDQSxHQUFBYyxLQXdDQSxPQXJDQUEsR0FBQUMsU0FBQSxXQUNBLE1BQUFuQyxNQUFBMEIsSUFBQSxTQUFBbEMsR0FDQSxHQUFBYyxHQUFBYSxFQUFBM0IsRUFBQTRCLEVBQ0EsT0FBQTVCLEdBQUEsR0FDQSxVQUFBQSxFQUFBLE9BQW1DYyxFQUFBLElBRW5DQSxJQUVHc0IsS0FBQSxLQUlITSxFQUFBbEYsRUFBQSxTQUFBTixFQUFBMEYsR0FDQSxnQkFBQTFGLEtBQ0FBLElBQUEsS0FBQUEsRUFBQSxLQUVBLFFBREEyRixNQUNBckYsRUFBQSxFQUFnQkEsRUFBQWdELEtBQUFOLE9BQWlCMUMsSUFBQSxDQUNqQyxHQUFBc0YsR0FBQXRDLEtBQUFoRCxHQUFBLEVBQ0EsaUJBQUFzRixLQUNBRCxFQUFBQyxJQUFBLEdBRUEsSUFBQXRGLEVBQUEsRUFBWUEsRUFBQU4sRUFBQWdELE9BQW9CMUMsSUFBQSxDQUNoQyxHQUFBd0MsR0FBQTlDLEVBQUFNLEVBS0EsaUJBQUF3QyxHQUFBLElBQUE2QyxFQUFBN0MsRUFBQSxNQUNBNEMsSUFBQTVDLEVBQUEsR0FDQUEsRUFBQSxHQUFBNEMsRUFDS0EsSUFDTDVDLEVBQUEsT0FBQUEsRUFBQSxhQUFBNEMsRUFBQSxLQUVBRixFQUFBdkIsS0FBQW5CLE1BSUEwQyxJTDROTSxTQUFVbkYsRUFBUUQsRUFBU0gsR01oS2pDLFFBQUE0RixHQUFBQyxFQUFBakMsR0FDQSxPQUFBdkQsR0FBQSxFQUFnQkEsRUFBQXdGLEVBQUE5QyxPQUFtQjFDLElBQUEsQ0FDbkMsR0FBQXdDLEdBQUFnRCxFQUFBeEYsR0FDQXlGLEVBQUFDLEVBQUFsRCxFQUFBOEMsR0FFQSxJQUFBRyxFQUFBLENBQ0FBLEVBQUFFLE1BRUEsUUFBQUMsR0FBQSxFQUFpQkEsRUFBQUgsRUFBQUksTUFBQW5ELE9BQTJCa0QsSUFDNUNILEVBQUFJLE1BQUFELEdBQUFwRCxFQUFBcUQsTUFBQUQsR0FHQSxNQUFRQSxFQUFBcEQsRUFBQXFELE1BQUFuRCxPQUF1QmtELElBQy9CSCxFQUFBSSxNQUFBbEMsS0FBQW1DLEVBQUF0RCxFQUFBcUQsTUFBQUQsR0FBQXJDLFFBRUcsQ0FHSCxPQUZBc0MsTUFFQUQsRUFBQSxFQUFpQkEsRUFBQXBELEVBQUFxRCxNQUFBbkQsT0FBdUJrRCxJQUN4Q0MsRUFBQWxDLEtBQUFtQyxFQUFBdEQsRUFBQXFELE1BQUFELEdBQUFyQyxHQUdBbUMsR0FBQWxELEVBQUE4QyxLQUEyQkEsR0FBQTlDLEVBQUE4QyxHQUFBSyxLQUFBLEVBQUFFLFdBSzNCLFFBQUFFLEdBQUFiLEVBQUEzQixHQUlBLE9BSEFpQyxNQUNBUSxLQUVBaEcsRUFBQSxFQUFnQkEsRUFBQWtGLEVBQUF4QyxPQUFpQjFDLElBQUEsQ0FDakMsR0FBQXdDLEdBQUEwQyxFQUFBbEYsR0FDQXNGLEVBQUEvQixFQUFBMEMsS0FBQXpELEVBQUEsR0FBQWUsRUFBQTBDLEtBQUF6RCxFQUFBLEdBQ0FVLEVBQUFWLEVBQUEsR0FDQTBELEVBQUExRCxFQUFBLEdBQ0FxQyxFQUFBckMsRUFBQSxHQUNBMkQsR0FBY2pELE1BQUFnRCxRQUFBckIsWUFFZG1CLEdBQUFWLEdBQ0FVLEVBQUFWLEdBQUFPLE1BQUFsQyxLQUFBd0MsR0FEQVgsRUFBQTdCLEtBQUFxQyxFQUFBVixJQUFrREEsS0FBQU8sT0FBQU0sS0FJbEQsTUFBQVgsR0FHQSxRQUFBWSxHQUFBN0MsRUFBQThDLEdBQ0EsR0FBQUMsR0FBQUMsRUFBQWhELEVBQUFpRCxXQUVBLEtBQUFGLEVBQ0EsU0FBQUcsT0FBQSw4R0FHQSxJQUFBQyxHQUFBQyxJQUFBakUsT0FBQSxFQUVBLFlBQUFhLEVBQUFxRCxTQUNBRixFQUVHQSxFQUFBRyxZQUNIUCxFQUFBUSxhQUFBVCxFQUFBSyxFQUFBRyxhQUVBUCxFQUFBUyxZQUFBVixHQUpBQyxFQUFBUSxhQUFBVCxFQUFBQyxFQUFBVSxZQU1BTCxFQUFBaEQsS0FBQTBDLE9BQ0UsZUFBQTlDLEVBQUFxRCxTQUNGTixFQUFBUyxZQUFBVixPQUNFLG9CQUFBOUMsR0FBQXFELFdBQUFyRCxFQUFBcUQsU0FBQUssT0FJRixTQUFBUixPQUFBLDZMQUhBLElBQUFJLEdBQUFOLEVBQUFoRCxFQUFBaUQsV0FBQSxJQUFBakQsRUFBQXFELFNBQUFLLE9BQ0FYLEdBQUFRLGFBQUFULEVBQUFRLElBTUEsUUFBQUssR0FBQWIsR0FDQSxVQUFBQSxFQUFBYyxXQUFBLFFBQ0FkLEdBQUFjLFdBQUFDLFlBQUFmLEVBRUEsSUFBQWdCLEdBQUFWLEVBQUFXLFFBQUFqQixFQUNBZ0IsSUFBQSxHQUNBVixFQUFBaEUsT0FBQTBFLEVBQUEsR0FJQSxRQUFBRSxHQUFBaEUsR0FDQSxHQUFBOEMsR0FBQW1CLFNBQUFDLGNBQUEsUUFPQSxPQUxBbEUsR0FBQW1FLE1BQUFDLEtBQUEsV0FFQUMsRUFBQXZCLEVBQUE5QyxFQUFBbUUsT0FDQXRCLEVBQUE3QyxFQUFBOEMsR0FFQUEsRUFHQSxRQUFBd0IsR0FBQXRFLEdBQ0EsR0FBQXVFLEdBQUFOLFNBQUFDLGNBQUEsT0FRQSxPQU5BbEUsR0FBQW1FLE1BQUFDLEtBQUEsV0FDQXBFLEVBQUFtRSxNQUFBSyxJQUFBLGFBRUFILEVBQUFFLEVBQUF2RSxFQUFBbUUsT0FDQXRCLEVBQUE3QyxFQUFBdUUsR0FFQUEsRUFHQSxRQUFBRixHQUFBSSxFQUFBTixHQUNBakgsT0FBQXdILEtBQUFQLEdBQUE5RSxRQUFBLFNBQUFzRixHQUNBRixFQUFBRyxhQUFBRCxFQUFBUixFQUFBUSxNQUlBLFFBQUFwQyxHQUFBc0MsRUFBQTdFLEdBQ0EsR0FBQThDLEdBQUFnQyxFQUFBQyxFQUFBQyxDQUdBLElBQUFoRixFQUFBRSxXQUFBMkUsRUFBQWxGLElBQUEsQ0FHQSxLQUZBcUYsRUFBQWhGLEVBQUFFLFVBQUEyRSxFQUFBbEYsTUFTQSxtQkFKQWtGLEdBQUFsRixJQUFBcUYsRUFVQSxHQUFBaEYsRUFBQWlGLFVBQUEsQ0FDQSxHQUFBQyxHQUFBQyxHQUVBckMsR0FBQW1DLE1BQUFqQixFQUFBaEUsSUFFQThFLEVBQUFNLEVBQUFDLEtBQUEsS0FBQXZDLEVBQUFvQyxHQUFBLEdBQ0FILEVBQUFLLEVBQUFDLEtBQUEsS0FBQXZDLEVBQUFvQyxHQUFBLE9BR0FMLEdBQUF2RCxXQUNBLGtCQUFBZ0UsTUFDQSxrQkFBQUEsS0FBQUMsaUJBQ0Esa0JBQUFELEtBQUFFLGlCQUNBLGtCQUFBQyxPQUNBLGtCQUFBMUUsT0FFQStCLEVBQUF3QixFQUFBdEUsR0FDQThFLEVBQUFZLEVBQUFMLEtBQUEsS0FBQXZDLEVBQUE5QyxHQUNBK0UsRUFBQSxXQUNBcEIsRUFBQWIsR0FFQUEsRUFBQTZDLE1BQUFMLElBQUFFLGdCQUFBMUMsRUFBQTZDLFNBR0E3QyxFQUFBa0IsRUFBQWhFLEdBQ0E4RSxFQUFBYyxFQUFBUCxLQUFBLEtBQUF2QyxHQUNBaUMsRUFBQSxXQUNBcEIsRUFBQWIsSUFNQSxPQUZBZ0MsR0FBQUQsR0FFQSxTQUFBZ0IsR0FDQSxHQUFBQSxFQUFBLENBQ0EsR0FDQUEsRUFBQWxHLE1BQUFrRixFQUFBbEYsS0FDQWtHLEVBQUFsRCxRQUFBa0MsRUFBQWxDLE9BQ0FrRCxFQUFBdkUsWUFBQXVELEVBQUF2RCxVQUVBLE1BR0F3RCxHQUFBRCxFQUFBZ0IsT0FFQWQsTUFlQSxRQUFBSyxHQUFBdEMsRUFBQWdELEVBQUFmLEVBQUFGLEdBQ0EsR0FBQWxGLEdBQUFvRixFQUFBLEdBQUFGLEVBQUFsRixHQUVBLElBQUFtRCxFQUFBaUQsV0FDQWpELEVBQUFpRCxXQUFBQyxRQUFBQyxFQUFBSCxFQUFBbkcsT0FDRSxDQUNGLEdBQUF1RyxHQUFBakMsU0FBQWtDLGVBQUF4RyxHQUNBeUcsRUFBQXRELEVBQUFzRCxVQUVBQSxHQUFBTixJQUFBaEQsRUFBQWUsWUFBQXVDLEVBQUFOLElBRUFNLEVBQUFqSCxPQUNBMkQsRUFBQVMsYUFBQTJDLEVBQUFFLEVBQUFOLElBRUFoRCxFQUFBVSxZQUFBMEMsSUFLQSxRQUFBTixHQUFBOUMsRUFBQStCLEdBQ0EsR0FBQWxGLEdBQUFrRixFQUFBbEYsSUFDQWdELEVBQUFrQyxFQUFBbEMsS0FNQSxJQUpBQSxHQUNBRyxFQUFBOEIsYUFBQSxRQUFBakMsR0FHQUcsRUFBQWlELFdBQ0FqRCxFQUFBaUQsV0FBQUMsUUFBQXJHLE1BQ0UsQ0FDRixLQUFBbUQsRUFBQVcsWUFDQVgsRUFBQWUsWUFBQWYsRUFBQVcsV0FHQVgsR0FBQVUsWUFBQVMsU0FBQWtDLGVBQUF4RyxLQUlBLFFBQUErRixHQUFBbkIsRUFBQXZFLEVBQUE2RSxHQUNBLEdBQUFsRixHQUFBa0YsRUFBQWxGLElBQ0EyQixFQUFBdUQsRUFBQXZELFVBUUErRSxNQUFBQyxLQUFBdEcsRUFBQXVHLHVCQUFBakYsR0FFQXRCLEVBQUF1Ryx1QkFBQUYsS0FDQTFHLEVBQUE2RyxFQUFBN0csSUFHQTJCLElBRUEzQixHQUFBLHVEQUF1RG9CLEtBQUFRLFNBQUFDLG1CQUFBQyxLQUFBQyxVQUFBSixNQUFBLE1BR3ZELElBQUFtRixHQUFBLEdBQUFoQixPQUFBOUYsSUFBNkJ5RSxLQUFBLGFBRTdCc0MsRUFBQW5DLEVBQUFvQixJQUVBcEIsR0FBQW9CLEtBQUFMLElBQUFDLGdCQUFBa0IsR0FFQUMsR0FBQXBCLElBQUFFLGdCQUFBa0IsR0F2V0EsR0FBQXZFLE1BV0F3RSxFQVRBLFNBQUFDLEdBQ0EsR0FBQUMsRUFFQSxtQkFFQSxXQURBLEtBQUFBLE1BQUFELEVBQUFFLE1BQUFySCxLQUFBc0gsWUFDQUYsSUFJQSxXQU1BLE1BQUFHLFNBQUEvQyxtQkFBQWdELE1BQUFELE9BQUFFLE9BR0FsRSxFQUFBLFNBQUE0RCxHQUNBLEdBQUFDLEtBRUEsaUJBQUFNLEdBQ0EsWUFBQU4sRUFBQU0sR0FBQSxDQUNBLEdBQUFDLEdBQUFSLEVBQUFqSyxLQUFBOEMsS0FBQTBILEVBRUEsSUFBQUMsWUFBQUosUUFBQUssa0JBQ0EsSUFHQUQsSUFBQUUsZ0JBQUFDLEtBQ0ssTUFBQUMsR0FDTEosRUFBQSxLQUdBUCxFQUFBTSxHQUFBQyxFQUVBLE1BQUFQLEdBQUFNLEtBRUMsU0FBQXBFLEdBQ0QsTUFBQWtCLFVBQUF3RCxjQUFBMUUsS0FHQWtDLEVBQUEsS0FDQUUsRUFBQSxFQUNBL0IsS0FFQW9ELEVBQUFwSyxFQUFBLEVBRUFJLEdBQUFELFFBQUEsU0FBQW9GLEVBQUEzQixHQUNBLHNCQUFBMEgsZUFDQSxnQkFBQXpELFVBQUEsU0FBQWYsT0FBQSwrREFHQWxELFNBRUFBLEVBQUFtRSxNQUFBLGdCQUFBbkUsR0FBQW1FLE1BQUFuRSxFQUFBbUUsU0FJQW5FLEVBQUFpRixZQUFBakYsRUFBQWlGLFVBQUEwQixLQUdBM0csRUFBQWlELGFBQUFqRCxFQUFBaUQsV0FBQSxRQUdBakQsRUFBQXFELFdBQUFyRCxFQUFBcUQsU0FBQSxTQUVBLElBQUFwQixHQUFBTyxFQUFBYixFQUFBM0IsRUFJQSxPQUZBZ0MsR0FBQUMsRUFBQWpDLEdBRUEsU0FBQTJILEdBR0EsT0FGQUMsTUFFQW5MLEVBQUEsRUFBaUJBLEVBQUF3RixFQUFBOUMsT0FBbUIxQyxJQUFBLENBQ3BDLEdBQUF3QyxHQUFBZ0QsRUFBQXhGLEdBQ0F5RixFQUFBQyxFQUFBbEQsRUFBQThDLEdBRUFHLEdBQUFFLE9BQ0F3RixFQUFBeEgsS0FBQThCLEdBR0EsR0FBQXlGLEVBQUEsQ0FFQTNGLEVBREFRLEVBQUFtRixFQUFBM0gsR0FDQUEsR0FHQSxPQUFBdkQsR0FBQSxFQUFpQkEsRUFBQW1MLEVBQUF6SSxPQUFzQjFDLElBQUEsQ0FDdkMsR0FBQXlGLEdBQUEwRixFQUFBbkwsRUFFQSxRQUFBeUYsRUFBQUUsS0FBQSxDQUNBLE9BQUFDLEdBQUEsRUFBbUJBLEVBQUFILEVBQUFJLE1BQUFuRCxPQUEyQmtELElBQUFILEVBQUFJLE1BQUFELFdBRTlDRixHQUFBRCxFQUFBSCxPQTZMQSxJQUFBa0UsR0FBQSxXQUNBLEdBQUE0QixLQUVBLGlCQUFBL0IsRUFBQWdDLEdBR0EsTUFGQUQsR0FBQS9CLEdBQUFnQyxFQUVBRCxFQUFBN0ksT0FBQStJLFNBQUExRyxLQUFBLFdOdVZNLFNBQVU3RSxFQUFRRCxHT2huQnhCQyxFQUFBRCxRQUFBLFNBQUFvRCxHQUVBLEdBQUFxSSxHQUFBLG1CQUFBaEIsZ0JBQUFnQixRQUVBLEtBQUFBLEVBQ0EsU0FBQTlFLE9BQUEsbUNBSUEsS0FBQXZELEdBQUEsZ0JBQUFBLEdBQ0EsTUFBQUEsRUFHQSxJQUFBc0ksR0FBQUQsRUFBQUUsU0FBQSxLQUFBRixFQUFBRyxLQUNBQyxFQUFBSCxFQUFBRCxFQUFBSyxTQUFBQyxRQUFBLGdCQTJEQSxPQS9CQTNJLEdBQUEySSxRQUFBLCtEQUFBQyxFQUFBQyxHQUVBLEdBQUFDLEdBQUFELEVBQ0FFLE9BQ0FKLFFBQUEsb0JBQUFyTCxFQUFBMEwsR0FBd0MsTUFBQUEsS0FDeENMLFFBQUEsb0JBQUFyTCxFQUFBMEwsR0FBd0MsTUFBQUEsSUFHeEMsbURBQUFDLEtBQUFILEdBQ0EsTUFBQUYsRUFJQSxJQUFBTSxFQWNBLE9BVkFBLEdBRkEsSUFBQUosRUFBQTFFLFFBQUEsTUFFQTBFLEVBQ0csSUFBQUEsRUFBQTFFLFFBQUEsS0FFSGtFLEVBQUFRLEVBR0FMLEVBQUFLLEVBQUFILFFBQUEsWUFJQSxPQUFBN0csS0FBQUMsVUFBQW1ILEdBQUEiLCJmaWxlIjoiLi9idWlsZC9idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbl9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbiQoZnVuY3Rpb24gKCkge1xuXG4gIC8vIENoYW5naW5nIGhlYWRlciBzaXplIG9uIG1lbnUgb3B0aW9uIHNlbGVjdFxuXG4gICQoJyNtZW51Jykub24oJ2NoYW5nZScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0O1xuICAgICQoJ2hlYWRlcicpLmFkZENsYXNzKCdhZGQtcGhvdG9zJyk7XG4gICAgJCgnLmhlYWRsaW5lcycpLmVtcHR5KCk7XG4gICAgJCgnLmxvYWRlci1kaXYnKS5hcHBlbmQoJzxpbWcgY2xhc3M9XCJsb2FkZXJcIiBzcmM9XCJhc3NldHMvaW1hZ2VzL2FqYXgtbG9hZGVyMS5naWZcIj4nKTtcblxuICAgIC8vIEdlbmVyYXRpbmcgQVBJIFVSTFxuXG4gICAgdmFyIHNlbGVjdGVkID0gJCgnI21lbnUgb3B0aW9uOnNlbGVjdGVkJykudmFsKCk7XG4gICAgdmFyIHVybCA9ICdodHRwczovL2FwaS5ueXRpbWVzLmNvbS9zdmMvdG9wc3Rvcmllcy92Mi8nICsgc2VsZWN0ZWQgKyAnLmpzb24nO1xuICAgIHVybCArPSAnPycgKyAkLnBhcmFtKHsgJ2FwaS1rZXknOiAnMWQzZDY3ZDM3YWUyNGM0YTgzNTQ3OWEyODgyY2Q1MWQnXG5cbiAgICAgIC8vIGxldCB1cmwgPSBgaHR0cHM6Ly9hcGkubnl0aW1lcy5jb20vc3ZjL3RvcHN0b3JpZXMvdjIvJHtzZWxlY3RlZH0uanNvbj8kLnBhcmFtKHsgJ2FwaS1rZXknOiAnMWQzZDY3ZDM3YWUyNGM0YTgzNTQ3OWEyODgyY2Q1MWRgXG5cbiAgICB9KTtcblxuICAgIC8vIEZldGNoaW5nIENvbnRlbnRcblxuICAgICQuYWpheCh7XG4gICAgICB1cmw6IHVybCxcbiAgICAgIG1ldGhvZDogJ0dFVCdcbiAgICB9KS5kb25lKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICBkYXRhLnJlc3VsdHMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIGlmIChpdGVtLm11bHRpbWVkaWEubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgIH1cbiAgICAgIH0pLnNwbGljZSgwLCAxMikuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICB2YXIgdGl0bGUgPSBpdGVtLmFic3RyYWN0O1xuICAgICAgICB2YXIgaW1hZ2UgPSBpdGVtLm11bHRpbWVkaWFbaXRlbS5tdWx0aW1lZGlhLmxlbmd0aCAtIDFdLnVybDtcbiAgICAgICAgdmFyIHVybCA9IGl0ZW0udXJsO1xuICAgICAgICAkKCcuaGVhZGxpbmVzJykuYXBwZW5kKCc8YSBjbGFzcz1cImFuY2hvclwiIHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKCcgKyBpbWFnZSArICcpXCIgaHJlZj1cIicgKyB1cmwgKyAnXCInICsgJz4nICsgJzxkaXYgY2xhc3M9XCJsaXN0LWltYWdlXCI+JyArIHRpdGxlICsgJzwvZGl2PjwvYT4nKTtcblxuICAgICAgICAvLyBUb2dnbGVzIHZpc2liaWxpdHkgb2YgY2FwdGlvbnMgZm9yIGVhY2ggc3Rvcnkgb24gaG92ZXJcblxuICAgICAgICAkKCcuYW5jaG9yJykub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkKHRoaXMpLmNoaWxkcmVuKCkuY3NzKCd2aXNpYmlsaXR5JywgJ3Zpc2libGUnKTtcbiAgICAgICAgfSk7XG4gICAgICAgICQoJy5hbmNob3InKS5vbignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkKHRoaXMpLmNoaWxkcmVuKCkuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pXG5cbiAgICAvLyBFcnJvciBNZXNzYWdlXG5cbiAgICAuZmFpbChmdW5jdGlvbiAoKSB7XG4gICAgICAkKCcubG9hZGVyLWRpdicpLmVtcHR5KCk7XG4gICAgICAkKCcubG9hZGVyLWRpdicpLmFwcGVuZCgnPGgzPlNvcnJ5ISBUaGVyZSB3YXMgYSBwcm9ibGVtLCBwbGVhc2UgdHJ5IGFnYWluITwvaDM+Jyk7XG4gICAgfSkuYWx3YXlzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vICQoJy5sb2FkZXInKS5yZW1vdmUoKTtcblxuICAgIH0pO1xuICB9KTtcblxuICAvLyBJbml0aWFsaXplIFNlbGVjdHJpY1xuXG4gICQoJ3NlbGVjdCcpLnNlbGVjdHJpYygpO1xufSk7XG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmksIGNvbnRlbnQsICcnXV07XG4vLyBQcmVwYXJlIGNzc1RyYW5zZm9ybWF0aW9uXG52YXIgdHJhbnNmb3JtO1xuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNCkoY29udGVudCwgb3B0aW9ucyk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKGZhbHNlKSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0yLTEhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tMi0yIS4vc3R5bGUuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMi0xIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTItMiEuL3N0eWxlLnNjc3NcIik7XG5cdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHR9KTtcblx0fVxuXHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKSh0cnVlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmksIFwiLnNlbGVjdHJpYy13cmFwcGVye3Bvc2l0aW9uOnJlbGF0aXZlO2N1cnNvcjpwb2ludGVyfS5zZWxlY3RyaWMtcmVzcG9uc2l2ZXt3aWR0aDoxMDAlfS5zZWxlY3RyaWN7Ym9yZGVyLXJhZGl1czo2cHg7YmFja2dyb3VuZDojMzMzNzQ1O3Bvc2l0aW9uOnJlbGF0aXZlfS5zZWxlY3RyaWMgLmxhYmVse2Rpc3BsYXk6YmxvY2s7d2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO21hcmdpbjowIDM4cHggMCAxMHB4O2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjM4cHg7Y29sb3I6I2ZmZjtoZWlnaHQ6MzhweH0uc2VsZWN0cmljIC5idXR0b257ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDowO3RvcDowO3dpZHRoOjM4cHg7aGVpZ2h0OjM4cHg7Y29sb3I6I2ZmZjt0ZXh0LWFsaWduOmNlbnRlcjtmb250OjAvMCBhOypmb250OjIwcHgvMzhweCBMdWNpZGEgU2FucyBVbmljb2RlLEFyaWFsIFVuaWNvZGUgTVMsQXJpYWx9LnNlbGVjdHJpYyAuYnV0dG9uOmFmdGVye2NvbnRlbnQ6XFxcIiBcXFwiO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3JpZ2h0OjA7Ym90dG9tOjA7bGVmdDowO21hcmdpbjphdXRvO3dpZHRoOjA7aGVpZ2h0OjA7Ym9yZGVyOjRweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItdG9wLWNvbG9yOiNmZmY7Ym9yZGVyLWJvdHRvbTpub25lfS5zZWxlY3RyaWMtZm9jdXMgLnNlbGVjdHJpY3tiYWNrZ3JvdW5kOiMxZDIwMjh9LnNlbGVjdHJpYy1ob3ZlciAuc2VsZWN0cmlje2JhY2tncm91bmQ6IzI4MmIzNn0uc2VsZWN0cmljLWhvdmVyIC5zZWxlY3RyaWMgLmJ1dHRvbntjb2xvcjojZTZlNmU2fS5zZWxlY3RyaWMtaG92ZXIgLnNlbGVjdHJpYyAuYnV0dG9uOmFmdGVye2JvcmRlci10b3AtY29sb3I6I2U2ZTZlNn0uc2VsZWN0cmljLW9wZW57ei1pbmRleDo5OTk5fS5zZWxlY3RyaWMtb3BlbiAuc2VsZWN0cmljLWl0ZW1ze2Rpc3BsYXk6YmxvY2t9LnNlbGVjdHJpYy1kaXNhYmxlZHtmaWx0ZXI6YWxwaGEob3BhY2l0eT01MCk7b3BhY2l0eTouNTtjdXJzb3I6ZGVmYXVsdDstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmV9LnNlbGVjdHJpYy1oaWRlLXNlbGVjdHtwb3NpdGlvbjpyZWxhdGl2ZTtvdmVyZmxvdzpoaWRkZW47d2lkdGg6MDtoZWlnaHQ6MH0uc2VsZWN0cmljLWhpZGUtc2VsZWN0IHNlbGVjdHtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMDAlfS5zZWxlY3RyaWMtaGlkZS1zZWxlY3Quc2VsZWN0cmljLWlzLW5hdGl2ZXtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3otaW5kZXg6MTB9LnNlbGVjdHJpYy1oaWRlLXNlbGVjdC5zZWxlY3RyaWMtaXMtbmF0aXZlIHNlbGVjdHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtoZWlnaHQ6MTAwJTt3aWR0aDoxMDAlO2JvcmRlcjpub25lO3otaW5kZXg6MTtib3gtc2l6aW5nOmJvcmRlci1ib3g7b3BhY2l0eTowfS5zZWxlY3RyaWMtaW5wdXR7cG9zaXRpb246YWJzb2x1dGUhaW1wb3J0YW50O3RvcDowIWltcG9ydGFudDtsZWZ0OjAhaW1wb3J0YW50O292ZXJmbG93OmhpZGRlbiFpbXBvcnRhbnQ7Y2xpcDpyZWN0KDAsMCwwLDApIWltcG9ydGFudDttYXJnaW46MCFpbXBvcnRhbnQ7cGFkZGluZzowIWltcG9ydGFudDt3aWR0aDoxcHghaW1wb3J0YW50O2hlaWdodDoxcHghaW1wb3J0YW50O291dGxpbmU6bm9uZSFpbXBvcnRhbnQ7Ym9yZGVyOm5vbmUhaW1wb3J0YW50Oypmb250OjAvMCBhIWltcG9ydGFudDtiYWNrZ3JvdW5kOm5vbmUhaW1wb3J0YW50fS5zZWxlY3RyaWMtdGVtcC1zaG93e3Bvc2l0aW9uOmFic29sdXRlIWltcG9ydGFudDt2aXNpYmlsaXR5OmhpZGRlbiFpbXBvcnRhbnQ7ZGlzcGxheTpibG9jayFpbXBvcnRhbnR9LnNlbGVjdHJpYy1pdGVtc3tkaXNwbGF5Om5vbmU7cG9zaXRpb246YWJzb2x1dGU7dG9wOjEwMCU7bGVmdDowO2JhY2tncm91bmQ6IzMzMzc0NTtib3JkZXI6MXB4IHNvbGlkICNjNGM0YzQ7ei1pbmRleDotMTtib3gtc2hhZG93OjAgMCAxMHB4IC02cHh9LnNlbGVjdHJpYy1pdGVtcyAuc2VsZWN0cmljLXNjcm9sbHtoZWlnaHQ6MTAwJTtvdmVyZmxvdzphdXRvfS5zZWxlY3RyaWMtYWJvdmUgLnNlbGVjdHJpYy1pdGVtc3t0b3A6YXV0bztib3R0b206MTAwJX0uc2VsZWN0cmljLWl0ZW1zIGxpLC5zZWxlY3RyaWMtaXRlbXMgdWx7bGlzdC1zdHlsZTpub25lO3BhZGRpbmc6MDttYXJnaW46MDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoyMHB4O21pbi1oZWlnaHQ6MjBweH0uc2VsZWN0cmljLWl0ZW1zIGxpe2Rpc3BsYXk6YmxvY2s7cGFkZGluZzoxMHB4O2NvbG9yOiNmZmY7Y3Vyc29yOnBvaW50ZXJ9LnNlbGVjdHJpYy1pdGVtcyBsaS5zZWxlY3RlZHtiYWNrZ3JvdW5kOiM1YzVmNmE7Y29sb3I6I2ZmZn0uc2VsZWN0cmljLWl0ZW1zIGxpLmhpZ2hsaWdodGVke2JhY2tncm91bmQ6IzQ3NGI1ODtjb2xvcjojZmZmfS5zZWxlY3RyaWMtaXRlbXMgbGk6aG92ZXJ7YmFja2dyb3VuZDojNzA3MzdkO2NvbG9yOiNmZmZ9LnNlbGVjdHJpYy1pdGVtcyAuZGlzYWJsZWR7ZmlsdGVyOmFscGhhKG9wYWNpdHk9NTApO29wYWNpdHk6LjU7Y3Vyc29yOmRlZmF1bHQhaW1wb3J0YW50O2JhY2tncm91bmQ6bm9uZSFpbXBvcnRhbnQ7Y29sb3I6I2ZmZiFpbXBvcnRhbnR9LnNlbGVjdHJpYy1pdGVtcyAuZGlzYWJsZWQsLnNlbGVjdHJpYy1pdGVtcyAuc2VsZWN0cmljLWdyb3VwIC5zZWxlY3RyaWMtZ3JvdXAtbGFiZWx7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfS5zZWxlY3RyaWMtaXRlbXMgLnNlbGVjdHJpYy1ncm91cCAuc2VsZWN0cmljLWdyb3VwLWxhYmVse2ZvbnQtd2VpZ2h0OjcwMDtwYWRkaW5nLWxlZnQ6MTBweDtjdXJzb3I6ZGVmYXVsdDtiYWNrZ3JvdW5kOm5vbmU7Y29sb3I6I2ZmZn0uc2VsZWN0cmljLWl0ZW1zIC5zZWxlY3RyaWMtZ3JvdXAuZGlzYWJsZWQgbGl7ZmlsdGVyOmFscGhhKG9wYWNpdHk9MTAwKTtvcGFjaXR5OjF9LnNlbGVjdHJpYy1pdGVtcyAuc2VsZWN0cmljLWdyb3VwIGxpe3BhZGRpbmctbGVmdDoyNXB4fWEsYWJicixhY3JvbnltLGFkZHJlc3MsYXBwbGV0LGFydGljbGUsYXNpZGUsYXVkaW8sYixiaWcsYmxvY2txdW90ZSxib2R5LGNhbnZhcyxjYXB0aW9uLGNlbnRlcixjaXRlLGNvZGUsZGQsZGVsLGRldGFpbHMsZGZuLGRpdixkbCxkdCxlbSxlbWJlZCxmaWVsZHNldCxmaWdjYXB0aW9uLGZpZ3VyZSxmb290ZXIsZm9ybSxoMSxoMixoMyxoNCxoNSxoNixoZWFkZXIsaGdyb3VwLGh0bWwsaSxpZnJhbWUsaW1nLGlucyxrYmQsbGFiZWwsbGVnZW5kLGxpLG1hcmssbWVudSxuYXYsb2JqZWN0LG9sLG91dHB1dCxwLHByZSxxLHJ1YnkscyxzYW1wLHNlY3Rpb24sc21hbGwsc3BhbixzdHJpa2Usc3Ryb25nLHN1YixzdW1tYXJ5LHN1cCx0YWJsZSx0Ym9keSx0ZCx0Zm9vdCx0aCx0aGVhZCx0aW1lLHRyLHR0LHUsdWwsdmFyLHZpZGVve21hcmdpbjowO3BhZGRpbmc6MDtib3JkZXI6MDtmb250LXNpemU6MTAwJTtmb250OmluaGVyaXQ7dmVydGljYWwtYWxpZ246YmFzZWxpbmV9YXJ0aWNsZSxhc2lkZSxkZXRhaWxzLGZpZ2NhcHRpb24sZmlndXJlLGZvb3RlcixoZWFkZXIsaGdyb3VwLG1lbnUsbmF2LHNlY3Rpb257ZGlzcGxheTpibG9ja31ib2R5e2xpbmUtaGVpZ2h0OjF9b2wsdWx7bGlzdC1zdHlsZTpub25lfWJsb2NrcXVvdGUscXtxdW90ZXM6bm9uZX1ibG9ja3F1b3RlOmFmdGVyLGJsb2NrcXVvdGU6YmVmb3JlLHE6YWZ0ZXIscTpiZWZvcmV7Y29udGVudDpcXFwiXFxcIjtjb250ZW50Om5vbmV9dGFibGV7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlO2JvcmRlci1zcGFjaW5nOjB9QGZvbnQtZmFjZXtmb250LWZhbWlseTpPcGVuIFNhbnM7c3JjOnVybChcXFwiL2Fzc2V0cy9mb250cy9PcGVuU2Fucy1MaWdodC5lb3RcXFwiKTtzcmM6dXJsKFxcXCIvYXNzZXRzL2ZvbnRzL09wZW5TYW5zLUxpZ2h0LmVvdD8jaWVmaXhcXFwiKSBmb3JtYXQoXFxcImVtYmVkZGVkLW9wZW50eXBlXFxcIiksdXJsKFxcXCIvYXNzZXRzL2ZvbnRzL09wZW5TYW5zLUxpZ2h0LndvZmYyXFxcIikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpLHVybChcXFwiL2Fzc2V0cy9mb250cy9PcGVuU2Fucy1MaWdodC53b2ZmXFxcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIiksdXJsKFxcXCIvYXNzZXRzL2ZvbnRzL09wZW5TYW5zLUxpZ2h0LnR0ZlxcXCIpIGZvcm1hdChcXFwidHJ1ZXR5cGVcXFwiKSx1cmwoXFxcIi9hc3NldHMvZm9udHMvT3BlblNhbnMtTGlnaHQuc3ZnI09wZW5TYW5zLUxpZ2h0XFxcIikgZm9ybWF0KFxcXCJzdmdcXFwiKTtmb250LXdlaWdodDozMDA7Zm9udC1zdHlsZTpub3JtYWx9QGZvbnQtZmFjZXtmb250LWZhbWlseTpPcGVuIFNhbnM7c3JjOnVybChcXFwiL2Fzc2V0cy9mb250cy9PcGVuU2Fuc0xpZ2h0LUl0YWxpYy5lb3RcXFwiKTtzcmM6dXJsKFxcXCIvYXNzZXRzL2ZvbnRzL09wZW5TYW5zTGlnaHQtSXRhbGljLmVvdD8jaWVmaXhcXFwiKSBmb3JtYXQoXFxcImVtYmVkZGVkLW9wZW50eXBlXFxcIiksdXJsKFxcXCIvYXNzZXRzL2ZvbnRzL09wZW5TYW5zTGlnaHQtSXRhbGljLndvZmYyXFxcIikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpLHVybChcXFwiL2Fzc2V0cy9mb250cy9PcGVuU2Fuc0xpZ2h0LUl0YWxpYy53b2ZmXFxcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIiksdXJsKFxcXCIvYXNzZXRzL2ZvbnRzL09wZW5TYW5zTGlnaHQtSXRhbGljLnR0ZlxcXCIpIGZvcm1hdChcXFwidHJ1ZXR5cGVcXFwiKSx1cmwoXFxcIi9hc3NldHMvZm9udHMvT3BlblNhbnNMaWdodC1JdGFsaWMuc3ZnI09wZW5TYW5zTGlnaHQtSXRhbGljXFxcIikgZm9ybWF0KFxcXCJzdmdcXFwiKTtmb250LXdlaWdodDozMDA7Zm9udC1zdHlsZTppdGFsaWN9Kntib3gtc2l6aW5nOmJvcmRlci1ib3h9Lm1haW57ZGlzcGxheTpmbGV4O2ZsZXgtZmxvdzpjb2x1bW4gd3JhcDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtoZWlnaHQ6NTAwcHg7bWFyZ2luOjI1cHggYXV0b30ubWFpbiBpbWd7aGVpZ2h0OjMwMHB4fS5pbnN0cnVjdGlvbnN7bWFyZ2luLXRvcDoyMHB4O3RleHQtYWxpZ246Y2VudGVyfS5pbnN0cnVjdGlvbnMgcHtwYWRkaW5nLWJvdHRvbToxMHB4fS5hZGQtcGhvdG9ze2Rpc3BsYXk6ZmxleDtmbGV4LWZsb3c6Y29sdW1uIHdyYXA7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7aGVpZ2h0OmF1dG87bWFyZ2luOjEwcHggYXV0bzt0cmFuc2l0aW9uOmFsbCAxcyBlYXNlLWluLW91dCAwc30uYWRkLXBob3RvcyBpbWd7aGVpZ2h0OjE1MHB4fUBtZWRpYSAobWluLXdpZHRoOjYwMHB4KXsubWFpbntkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOjFmciA1ZnI7bWFyZ2luLWxlZnQ6MTMwcHh9Lmluc3RydWN0aW9uc3tncmlkLWNvbHVtbjoyLzM7ZGlzcGxheTpmbGV4O2ZsZXgtZmxvdzpjb2x1bW4gd3JhcDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydDt3aWR0aDoxNjBweDttYXJnaW4tbGVmdDo0MHB4fS5pbnN0cnVjdGlvbnMgcHtwYWRkaW5nLWJvdHRvbToxMHB4fS5hZGQtcGhvdG9ze2hlaWdodDphdXRvO21hcmdpbjoxMHB4IGF1dG87cGFkZGluZy1sZWZ0OjQwcHh9LmFkZC1waG90b3MgaW1ne2hlaWdodDo4MHB4O21hcmdpbi10b3A6MTBweDttYXJnaW4tbGVmdDoxMDBweH19QG1lZGlhIChtaW4td2lkdGg6MTAwMHB4KXsubWFpbntkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOjFmciA1ZnI7bWFyZ2luLWxlZnQ6MTBweH0uYWRkLXBob3Rvc3toZWlnaHQ6YXV0bztwYWRkaW5nOjB9LmFkZC1waG90b3MgaW1ne2hlaWdodDo4MHB4O21hcmdpbi10b3A6MTBweDttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDoyMHB4fS5pbnN0cnVjdGlvbnN7Z3JpZC1jb2x1bW46Mi8zO2Rpc3BsYXk6ZmxleDtmbGV4LWZsb3c6Y29sdW1uIHdyYXA7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7d2lkdGg6MTgwcHg7bWFyZ2luLWxlZnQ6MzBweDtwYWRkaW5nLWxlZnQ6MzBweH19Ym9keXtmb250LXNpemU6MTZweDtjb2xvcjojZmZmO2ZvbnQtZmFtaWx5Ok9wZW4gU2FucyxBcmlhbCxIZWx2ZXRpY2Esc2Fucy1zZXJpZjtmb250LXdlaWdodDozMDA7YmFja2dyb3VuZC1jb2xvcjojMDAwfXNlbGVjdHt3aWR0aDoxMDBweDttYXJnaW46MjBweCBhdXRvfS5sb2FkZXItZGl2e2Rpc3BsYXk6ZmxleDtmbGV4LWZsb3c6cm93IHdyYXA7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9LmxvYWRlcnt3aWR0aDo1MHB4O2hlaWdodDo1MHB4fWgze2ZvbnQtc3R5bGU6aXRhbGljfS5saXN0LWltYWdle2JhY2tncm91bmQ6cmdiYSg1MCw1MCw1MCwuNSk7Y29sb3I6I2ZmZjt2aXNpYmlsaXR5OmhpZGRlbn0uaGVhZGxpbmVze3dpZHRoOjEwMCV9LmhlYWRsaW5lcyBhe2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDtiYWNrZ3JvdW5kLXNpemU6Y292ZXI7dGV4dC1kZWNvcmF0aW9uOm5vbmU7aGVpZ2h0OjEwMHZ3O3dpZHRoOjEwMCU7ZGlzcGxheTpmbGV4O2ZsZXgtZmxvdzpjb2x1bW4gd3JhcDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1lbmR9QG1lZGlhIChtaW4td2lkdGg6NjAwcHgpey5oZWFkbGluZXN7d2lkdGg6MTAwJTtkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOjFmciAxZnJ9LmhlYWRsaW5lcyBhe2hlaWdodDo1MHZ3fX1AbWVkaWEgKG1pbi13aWR0aDoxMDAwcHgpey5oZWFkbGluZXN7d2lkdGg6MTAwJTtkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOjFmciAxZnIgMWZyIDFmcn0uaGVhZGxpbmVzIGF7aGVpZ2h0OjI1dnd9fWZvb3RlcntkaXNwbGF5OmZsZXg7ZmxleC1mbG93OmNvbHVtbiB3cmFwO2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfWZvb3RlciBwe21hcmdpbi10b3A6MzBweDttYXJnaW4tYm90dG9tOjMwcHg7Y29sb3I6I2MyYzJjMn0uY29weXJpZ2h0e3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX1AbWVkaWEgKG1pbi13aWR0aDoxMDAwcHgpe2Zvb3RlcntqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydDthbGlnbi1pdGVtczpmbGV4LXN0YXJ0O21hcmdpbi1sZWZ0OjIwcHh9fVwiLCBcIlwiLCB7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJEOi9JbHlhIE0vSFRNTCBMZWFybmluZy9SRUQvUHJvamVjdC0yL3Nhc3Mvc2Fzcy9fc2VsZWN0cmljLnNjc3NcIixcIkQ6L0lseWEgTS9IVE1MIExlYXJuaW5nL1JFRC9Qcm9qZWN0LTIvc2Fzcy9zYXNzL19yZXNldC5zY3NzXCIsXCJEOi9JbHlhIE0vSFRNTCBMZWFybmluZy9SRUQvUHJvamVjdC0yL3Nhc3Mvc2Fzcy9fZm9udHMuc2Nzc1wiLFwiRDovSWx5YSBNL0hUTUwgTGVhcm5pbmcvUkVEL1Byb2plY3QtMi9zYXNzL3Nhc3MvX2dsb2JhbHMuc2Nzc1wiLFwiRDovSWx5YSBNL0hUTUwgTGVhcm5pbmcvUkVEL1Byb2plY3QtMi9zYXNzL3Nhc3MvX2hlYWRlci5zY3NzXCIsXCJEOi9JbHlhIE0vSFRNTCBMZWFybmluZy9SRUQvUHJvamVjdC0yL3Nhc3Mvc2Fzcy9fY29udGVudC5zY3NzXCIsXCJEOi9JbHlhIE0vSFRNTCBMZWFybmluZy9SRUQvUHJvamVjdC0yL3Nhc3Mvc2Fzcy9fZm9vdGVyLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFB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QixDQUNuQixjQUtDLGdCQUNBLGFBQ0Esc0JBQ0EsMkJBQ0EsWUFDQSxpQkFDQSxpQkFBa0IsQ0FFckIsQ0N4R0gsS0FDRSxlQUNBLFdBQ0EsaURBQ0EsZ0JBQ0EscUJBQXVCLENBQ3hCLE9BR0MsWUFDQSxnQkFBaUIsQ0FDbEIsWUFJQyxhQUNBLG1CQUNBLHVCQUNBLGtCQUFtQixDQUNwQixRQUdDLFdBQ0EsV0FBWSxDQUNaLEdBR0EsaUJBQWtCLENBQ25CLFlBSUMsNkJBQ0EsV0FDQSxpQkFBa0IsQ0FDbkIsV0FHQyxVQUFXLENBRGIsYUFJSSw0QkFDQSxzQkFDQSxxQkFDQSxhQUNBLFdBQ0EsYUFDQSxzQkFDQSx3QkFBeUIsQ0FFMUIseUJBU0QsV0FDRSxXQUNBLGFBQ0EsNkJBQThCLENBSGhDLGFBTUksV0FBWSxDQUNiLENBS0wsMEJBQ0UsV0FDRSxXQUNBLGFBQ0EscUNBQXNDLENBSHhDLGFBTUksV0FBWSxDQUNiLENDaEZMLE9BQ0UsYUFDQSxzQkFDQSx1QkFDQSxrQkFBbUIsQ0FFcEIsU0FHQyxnQkFDQSxtQkFDQSxhQUFjLENBQ2YsV0FHQyx3QkFBeUIsQ0FDMUIsMEJBS0csT0FDRSwyQkFDQSx1QkFDQSxnQkFBaUIsQ0FDbEIsQ0FBQVwiLFwiZmlsZVwiOlwic3R5bGUuc2Nzc1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XFxyXFxuICBTZWxlY3RyaWNcXHJcXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXFxyXFxuLnNlbGVjdHJpYy13cmFwcGVyIHtcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLnNlbGVjdHJpYy1yZXNwb25zaXZlIHtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljIHtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDZweDtcXHJcXG4gIGJhY2tncm91bmQ6ICMzMzM3NDU7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICBcXHJcXG4gIC8vIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMDBweCkge1xcclxcbiAgLy8gICBtYXJnaW46IDAgNTBweDtcXHJcXG4gIC8vIH1cXHJcXG59XFxyXFxuXFxyXFxuLnNlbGVjdHJpYyAubGFiZWwge1xcclxcbiAgZGlzcGxheTogYmxvY2s7XFxyXFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcclxcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcclxcbiAgbWFyZ2luOiAwIDM4cHggMCAxMHB4O1xcclxcbiAgZm9udC1zaXplOiAxMnB4O1xcclxcbiAgbGluZS1oZWlnaHQ6IDM4cHg7XFxyXFxuICBjb2xvcjogI0ZGRjtcXHJcXG4gIGhlaWdodDogMzhweDtcXHJcXG59XFxyXFxuXFxyXFxuLnNlbGVjdHJpYyAuYnV0dG9uIHtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgcmlnaHQ6IDA7XFxyXFxuICB0b3A6IDA7XFxyXFxuICB3aWR0aDogMzhweDtcXHJcXG4gIGhlaWdodDogMzhweDtcXHJcXG4gIGNvbG9yOiAjRkZGO1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgZm9udDogMC8wIGE7XFxyXFxuICAqZm9udDogMjBweC8zOHB4IEx1Y2lkYSBTYW5zIFVuaWNvZGUsIEFyaWFsIFVuaWNvZGUgTVMsIEFyaWFsO1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljIC5idXR0b246YWZ0ZXIge1xcclxcbiAgY29udGVudDogXFxcIiBcXFwiO1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgdG9wOiAwO1xcclxcbiAgcmlnaHQ6IDA7XFxyXFxuICBib3R0b206IDA7XFxyXFxuICBsZWZ0OiAwO1xcclxcbiAgbWFyZ2luOiBhdXRvO1xcclxcbiAgd2lkdGg6IDA7XFxyXFxuICBoZWlnaHQ6IDA7XFxyXFxuICBib3JkZXI6IDRweCBzb2xpZCB0cmFuc3BhcmVudDtcXHJcXG4gIGJvcmRlci10b3AtY29sb3I6ICNGRkY7XFxyXFxuICBib3JkZXItYm90dG9tOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljLWZvY3VzIC5zZWxlY3RyaWMge1xcclxcbiAgYmFja2dyb3VuZDogIzFkMjAyODtcXHJcXG59XFxyXFxuXFxyXFxuLnNlbGVjdHJpYy1ob3ZlciAuc2VsZWN0cmljIHtcXHJcXG4gIGJhY2tncm91bmQ6ICMyODJiMzY7XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMtaG92ZXIgLnNlbGVjdHJpYyAuYnV0dG9uIHtcXHJcXG4gIGNvbG9yOiAjZTZlNmU2O1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljLWhvdmVyIC5zZWxlY3RyaWMgLmJ1dHRvbjphZnRlciB7XFxyXFxuICBib3JkZXItdG9wLWNvbG9yOiAjZTZlNmU2O1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljLW9wZW4ge1xcclxcbiAgei1pbmRleDogOTk5OTtcXHJcXG59XFxyXFxuXFxyXFxuLnNlbGVjdHJpYy1vcGVuIC5zZWxlY3RyaWMtaXRlbXMge1xcclxcbiAgZGlzcGxheTogYmxvY2s7XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMtZGlzYWJsZWQge1xcclxcbiAgZmlsdGVyOiBhbHBoYShvcGFjaXR5PTUwKTtcXHJcXG4gIG9wYWNpdHk6IDAuNTtcXHJcXG4gIGN1cnNvcjogZGVmYXVsdDtcXHJcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMtaGlkZS1zZWxlY3Qge1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gIHdpZHRoOiAwO1xcclxcbiAgaGVpZ2h0OiAwO1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljLWhpZGUtc2VsZWN0IHNlbGVjdCB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICBsZWZ0OiAtMTAwJTtcXHJcXG59XFxyXFxuXFxyXFxuLnNlbGVjdHJpYy1oaWRlLXNlbGVjdC5zZWxlY3RyaWMtaXMtbmF0aXZlIHtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgei1pbmRleDogMTA7XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMtaGlkZS1zZWxlY3Quc2VsZWN0cmljLWlzLW5hdGl2ZSBzZWxlY3Qge1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgdG9wOiAwO1xcclxcbiAgbGVmdDogMDtcXHJcXG4gIHJpZ2h0OiAwO1xcclxcbiAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxuICBib3JkZXI6IG5vbmU7XFxyXFxuICB6LWluZGV4OiAxO1xcclxcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gIG9wYWNpdHk6IDA7XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMtaW5wdXQge1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlICFpbXBvcnRhbnQ7XFxyXFxuICB0b3A6IDAgIWltcG9ydGFudDtcXHJcXG4gIGxlZnQ6IDAgIWltcG9ydGFudDtcXHJcXG4gIG92ZXJmbG93OiBoaWRkZW4gIWltcG9ydGFudDtcXHJcXG4gIGNsaXA6IHJlY3QoMCwgMCwgMCwgMCkgIWltcG9ydGFudDtcXHJcXG4gIG1hcmdpbjogMCAhaW1wb3J0YW50O1xcclxcbiAgcGFkZGluZzogMCAhaW1wb3J0YW50O1xcclxcbiAgd2lkdGg6IDFweCAhaW1wb3J0YW50O1xcclxcbiAgaGVpZ2h0OiAxcHggIWltcG9ydGFudDtcXHJcXG4gIG91dGxpbmU6IG5vbmUgIWltcG9ydGFudDtcXHJcXG4gIGJvcmRlcjogbm9uZSAhaW1wb3J0YW50O1xcclxcbiAgKmZvbnQ6IDAvMCBhICFpbXBvcnRhbnQ7XFxyXFxuICBiYWNrZ3JvdW5kOiBub25lICFpbXBvcnRhbnQ7XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMtdGVtcC1zaG93IHtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZSAhaW1wb3J0YW50O1xcclxcbiAgdmlzaWJpbGl0eTogaGlkZGVuICFpbXBvcnRhbnQ7XFxyXFxuICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xcclxcbn1cXHJcXG5cXHJcXG4vKiBJdGVtcyBib3ggKi9cXHJcXG4uc2VsZWN0cmljLWl0ZW1zIHtcXHJcXG4gIGRpc3BsYXk6IG5vbmU7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICB0b3A6IDEwMCU7XFxyXFxuICBsZWZ0OiAwO1xcclxcbiAgYmFja2dyb3VuZDogIzMzMzc0NTtcXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNjNGM0YzQ7XFxyXFxuICB6LWluZGV4OiAtMTtcXHJcXG4gIGJveC1zaGFkb3c6IDAgMCAxMHB4IC02cHg7XFxyXFxuXFxyXFxuICAvLyBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDAwcHgpIHtcXHJcXG4gIC8vICAgbWFyZ2luLWxlZnQ6IDUwcHg7XFxyXFxuICAvLyB9XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMtaXRlbXMgLnNlbGVjdHJpYy1zY3JvbGwge1xcclxcbiAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgb3ZlcmZsb3c6IGF1dG87XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMtYWJvdmUgLnNlbGVjdHJpYy1pdGVtcyB7XFxyXFxuICB0b3A6IGF1dG87XFxyXFxuICBib3R0b206IDEwMCU7XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMtaXRlbXMgdWwsIC5zZWxlY3RyaWMtaXRlbXMgbGkge1xcclxcbiAgbGlzdC1zdHlsZTogbm9uZTtcXHJcXG4gIHBhZGRpbmc6IDA7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuICBmb250LXNpemU6IDEycHg7XFxyXFxuICBsaW5lLWhlaWdodDogMjBweDtcXHJcXG4gIG1pbi1oZWlnaHQ6IDIwcHg7XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMtaXRlbXMgbGkge1xcclxcbiAgZGlzcGxheTogYmxvY2s7XFxyXFxuICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgY29sb3I6ICNGRkY7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMtaXRlbXMgbGkuc2VsZWN0ZWQge1xcclxcbiAgYmFja2dyb3VuZDogIzVjNWY2YTtcXHJcXG4gIGNvbG9yOiAjRkZGO1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljLWl0ZW1zIGxpLmhpZ2hsaWdodGVkIHtcXHJcXG4gIGJhY2tncm91bmQ6ICM0NzRiNTg7XFxyXFxuICBjb2xvcjogI0ZGRjtcXHJcXG59XFxyXFxuXFxyXFxuLnNlbGVjdHJpYy1pdGVtcyBsaTpob3ZlciB7XFxyXFxuICBiYWNrZ3JvdW5kOiAjNzA3MzdkO1xcclxcbiAgY29sb3I6ICNGRkY7XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMtaXRlbXMgLmRpc2FibGVkIHtcXHJcXG4gIGZpbHRlcjogYWxwaGEob3BhY2l0eT01MCk7XFxyXFxuICBvcGFjaXR5OiAwLjU7XFxyXFxuICBjdXJzb3I6IGRlZmF1bHQgIWltcG9ydGFudDtcXHJcXG4gIGJhY2tncm91bmQ6IG5vbmUgIWltcG9ydGFudDtcXHJcXG4gIGNvbG9yOiAjRkZGICFpbXBvcnRhbnQ7XFxyXFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljLWl0ZW1zIC5zZWxlY3RyaWMtZ3JvdXAgLnNlbGVjdHJpYy1ncm91cC1sYWJlbCB7XFxyXFxuICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gIHBhZGRpbmctbGVmdDogMTBweDtcXHJcXG4gIGN1cnNvcjogZGVmYXVsdDtcXHJcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICBiYWNrZ3JvdW5kOiBub25lO1xcclxcbiAgY29sb3I6ICNGRkY7XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMtaXRlbXMgLnNlbGVjdHJpYy1ncm91cC5kaXNhYmxlZCBsaSB7XFxyXFxuICBmaWx0ZXI6IGFscGhhKG9wYWNpdHk9MTAwKTtcXHJcXG4gIG9wYWNpdHk6IDE7XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMtaXRlbXMgLnNlbGVjdHJpYy1ncm91cCBsaSB7XFxyXFxuICBwYWRkaW5nLWxlZnQ6IDI1cHg7XFxyXFxufVxcclxcblwiLFwiLyogaHR0cDovL21leWVyd2ViLmNvbS9lcmljL3Rvb2xzL2Nzcy9yZXNldC8gXFxyXFxuICAgdjIuMCB8IDIwMTEwMTI2XFxyXFxuICAgTGljZW5zZTogbm9uZSAocHVibGljIGRvbWFpbilcXHJcXG4qL1xcclxcblxcclxcbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcXHJcXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsXFxyXFxuYSwgYWJiciwgYWNyb255bSwgYWRkcmVzcywgYmlnLCBjaXRlLCBjb2RlLFxcclxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcXHJcXG5zbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLFxcclxcbmIsIHUsIGksIGNlbnRlcixcXHJcXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxcclxcbmZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLFxcclxcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxcclxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLCBcXHJcXG5maWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIFxcclxcbm1lbnUsIG5hdiwgb3V0cHV0LCBydWJ5LCBzZWN0aW9uLCBzdW1tYXJ5LFxcclxcbnRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbyB7XFxyXFxuXFx0bWFyZ2luOiAwO1xcclxcblxcdHBhZGRpbmc6IDA7XFxyXFxuXFx0Ym9yZGVyOiAwO1xcclxcblxcdGZvbnQtc2l6ZTogMTAwJTtcXHJcXG5cXHRmb250OiBpbmhlcml0O1xcclxcblxcdHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXHJcXG59XFxyXFxuLyogSFRNTDUgZGlzcGxheS1yb2xlIHJlc2V0IGZvciBvbGRlciBicm93c2VycyAqL1xcclxcbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsIFxcclxcbmZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgc2VjdGlvbiB7XFxyXFxuXFx0ZGlzcGxheTogYmxvY2s7XFxyXFxufVxcclxcbmJvZHkge1xcclxcblxcdGxpbmUtaGVpZ2h0OiAxO1xcclxcbn1cXHJcXG5vbCwgdWwge1xcclxcblxcdGxpc3Qtc3R5bGU6IG5vbmU7XFxyXFxufVxcclxcbmJsb2NrcXVvdGUsIHEge1xcclxcblxcdHF1b3Rlczogbm9uZTtcXHJcXG59XFxyXFxuYmxvY2txdW90ZTpiZWZvcmUsIGJsb2NrcXVvdGU6YWZ0ZXIsXFxyXFxucTpiZWZvcmUsIHE6YWZ0ZXIge1xcclxcblxcdGNvbnRlbnQ6ICcnO1xcclxcblxcdGNvbnRlbnQ6IG5vbmU7XFxyXFxufVxcclxcbnRhYmxlIHtcXHJcXG5cXHRib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcclxcblxcdGJvcmRlci1zcGFjaW5nOiAwO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBFTkQgUkVTRVQgKi9cXHJcXG5cXHJcXG5cIixcIi8qIFRoaXMgc3R5bGVzaGVldCBnZW5lcmF0ZWQgYnkgVHJhbnNmb250ZXIgKGh0dHBzOi8vdHJhbnNmb250ZXIub3JnKSBvbiBPY3RvYmVyIDE2LCAyMDE3IDc6NTIgUE0gKi9cXHJcXG5cXHJcXG5AZm9udC1mYWNlIHtcXHJcXG5cXHRmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XFxyXFxuXFx0c3JjOiB1cmwoJy9hc3NldHMvZm9udHMvT3BlblNhbnMtTGlnaHQuZW90Jyk7XFxyXFxuXFx0c3JjOiB1cmwoJy9hc3NldHMvZm9udHMvT3BlblNhbnMtTGlnaHQuZW90PyNpZWZpeCcpIGZvcm1hdCgnZW1iZWRkZWQtb3BlbnR5cGUnKSxcXHJcXG5cXHRcXHR1cmwoJy9hc3NldHMvZm9udHMvT3BlblNhbnMtTGlnaHQud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksXFxyXFxuXFx0XFx0dXJsKCcvYXNzZXRzL2ZvbnRzL09wZW5TYW5zLUxpZ2h0LndvZmYnKSBmb3JtYXQoJ3dvZmYnKSxcXHJcXG5cXHRcXHR1cmwoJy9hc3NldHMvZm9udHMvT3BlblNhbnMtTGlnaHQudHRmJykgZm9ybWF0KCd0cnVldHlwZScpLFxcclxcblxcdFxcdHVybCgnL2Fzc2V0cy9mb250cy9PcGVuU2Fucy1MaWdodC5zdmcjT3BlblNhbnMtTGlnaHQnKSBmb3JtYXQoJ3N2ZycpO1xcclxcblxcdGZvbnQtd2VpZ2h0OiAzMDA7XFxyXFxuXFx0Zm9udC1zdHlsZTogbm9ybWFsO1xcclxcbn1cXHJcXG5cXHJcXG5AZm9udC1mYWNlIHtcXHJcXG5cXHRmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XFxyXFxuXFx0c3JjOiB1cmwoJy9hc3NldHMvZm9udHMvT3BlblNhbnNMaWdodC1JdGFsaWMuZW90Jyk7XFxyXFxuXFx0c3JjOiB1cmwoJy9hc3NldHMvZm9udHMvT3BlblNhbnNMaWdodC1JdGFsaWMuZW90PyNpZWZpeCcpIGZvcm1hdCgnZW1iZWRkZWQtb3BlbnR5cGUnKSxcXHJcXG5cXHRcXHR1cmwoJy9hc3NldHMvZm9udHMvT3BlblNhbnNMaWdodC1JdGFsaWMud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksXFxyXFxuXFx0XFx0dXJsKCcvYXNzZXRzL2ZvbnRzL09wZW5TYW5zTGlnaHQtSXRhbGljLndvZmYnKSBmb3JtYXQoJ3dvZmYnKSxcXHJcXG5cXHRcXHR1cmwoJy9hc3NldHMvZm9udHMvT3BlblNhbnNMaWdodC1JdGFsaWMudHRmJykgZm9ybWF0KCd0cnVldHlwZScpLFxcclxcblxcdFxcdHVybCgnL2Fzc2V0cy9mb250cy9PcGVuU2Fuc0xpZ2h0LUl0YWxpYy5zdmcjT3BlblNhbnNMaWdodC1JdGFsaWMnKSBmb3JtYXQoJ3N2ZycpO1xcclxcblxcdGZvbnQtd2VpZ2h0OiAzMDA7XFxyXFxuXFx0Zm9udC1zdHlsZTogaXRhbGljO1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG5cIixcIioge1xcclxcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG59XFxyXFxuXCIsXCJcXHJcXG4ubWFpbiB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1mbG93OiBjb2x1bW4gd3JhcDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIGhlaWdodDogNTAwcHg7XFxyXFxuICBtYXJnaW46IDI1cHggYXV0bztcXHJcXG5cXHJcXG4gIGltZyB7XFxyXFxuICAgIGhlaWdodDogMzAwcHg7XFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbi5pbnN0cnVjdGlvbnMge1xcclxcbiAgbWFyZ2luLXRvcDogMjBweDtcXHJcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG5cXHJcXG4gICBwIHtcXHJcXG4gICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xcclxcbiAgIH1cXHJcXG59XFxyXFxuXFxyXFxuLmFkZC1waG90b3Mge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZmxvdzogY29sdW1uIHdyYXA7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICBoZWlnaHQ6IGF1dG87XFxyXFxuICBtYXJnaW46IDEwcHggYXV0bztcXHJcXG4gIHRyYW5zaXRpb246IGFsbCAxcyBlYXNlLWluLW91dCAwcztcXHJcXG5cXHJcXG4gIGltZyB7XFxyXFxuICAgIGhlaWdodDogMTUwcHg7XFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcblxcclxcbkBtZWRpYSBhbGwgYW5kIChtaW4td2lkdGg6IDYwMHB4KSB7XFxyXFxuICBcXHJcXG4gIFxcclxcbiAgICAubWFpbiB7XFxyXFxuICAgICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciA1ZnI7ICAgIFxcclxcbiAgICAgIG1hcmdpbi1sZWZ0OiAxMzBweDtcXHJcXG4gICAgfVxcclxcbiAgXFxyXFxuICAgIC5pbnN0cnVjdGlvbnMge1xcclxcbiAgICAgIGdyaWQtY29sdW1uOiAyIC8gMztcXHJcXG4gICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgIGZsZXgtZmxvdzogY29sdW1uIHdyYXA7XFxyXFxuICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcclxcbiAgICAgIHdpZHRoOiAxNjBweDtcXHJcXG4gICAgICBtYXJnaW4tbGVmdDogNDBweDtcXHJcXG5cXHJcXG4gICAgICAgcCB7XFxyXFxuICAgICAgICAgcGFkZGluZy1ib3R0b206IDEwcHg7XFxyXFxuICAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBcXHJcXG4gICAgIC5hZGQtcGhvdG9zIHtcXHJcXG4gICAgICBoZWlnaHQ6IGF1dG87XFxyXFxuICAgICAgbWFyZ2luOiAxMHB4IGF1dG87XFxyXFxuICAgICAgcGFkZGluZy1sZWZ0OiA0MHB4O1xcclxcbiAgICBcXHJcXG4gICAgICBpbWcge1xcclxcbiAgICAgICAgaGVpZ2h0OiA4MHB4O1xcclxcbiAgICAgICAgbWFyZ2luLXRvcDogMTBweDtcXHJcXG4gICAgICAgIG1hcmdpbi1sZWZ0OiAxMDBweDtcXHJcXG4gICAgICB9XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG5cXHJcXG5cXHJcXG5AbWVkaWEgYWxsIGFuZCAobWluLXdpZHRoOiAxMDAwcHgpIHtcXHJcXG4gIFxcclxcbiAgLm1haW4ge1xcclxcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgNWZyOyAgICBcXHJcXG4gICAgICBtYXJnaW4tbGVmdDogMTBweDtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gIC5hZGQtcGhvdG9zIHtcXHJcXG4gICAgaGVpZ2h0OiBhdXRvO1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbiAgXFxyXFxuICAgIGltZyB7XFxyXFxuICAgICAgaGVpZ2h0OiA4MHB4O1xcclxcbiAgICAgIG1hcmdpbi10b3A6IDEwcHg7XFxyXFxuICAgICAgbWFyZ2luLWxlZnQ6IDA7XFxyXFxuICAgICAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xcclxcbiAgICB9XFxyXFxuICB9XFxyXFxuXFxyXFxuXFxyXFxuICAuaW5zdHJ1Y3Rpb25zIHtcXHJcXG4gICAgICBncmlkLWNvbHVtbjogMiAvIDM7XFxyXFxuICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICBmbGV4LWZsb3c6IGNvbHVtbiB3cmFwO1xcclxcbiAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXHJcXG4gICAgICB3aWR0aDogMTgwcHg7XFxyXFxuICAgICAgbWFyZ2luLWxlZnQ6IDMwcHg7XFxyXFxuICAgICAgcGFkZGluZy1sZWZ0OiAzMHB4OyBcXHJcXG4gICAgICBcXHJcXG4gIH1cXHJcXG5cXHJcXG59ICBcIixcIlxcclxcbmJvZHkge1xcclxcbiAgZm9udC1zaXplOiAxNnB4O1xcclxcbiAgY29sb3I6IHdoaXRlO1xcclxcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xcclxcbiAgZm9udC13ZWlnaHQ6IDMwMDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xcclxcbn1cXHJcXG5cXHJcXG5zZWxlY3Qge1xcclxcbiAgd2lkdGg6IDEwMHB4O1xcclxcbiAgbWFyZ2luOiAyMHB4IGF1dG87XFxyXFxufVxcclxcblxcclxcblxcclxcbi5sb2FkZXItZGl2IHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWZsb3c6IHJvdyB3cmFwO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4ubG9hZGVyIHtcXHJcXG4gIHdpZHRoOiA1MHB4O1xcclxcbiAgaGVpZ2h0OiA1MHB4O1xcclxcbiB9XFxyXFxuXFxyXFxuIGgzIHtcXHJcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuLmxpc3QtaW1hZ2Uge1xcclxcbiAgYmFja2dyb3VuZDogJGNhcHRpb25CYWNrZ3JvdW5kO1xcclxcbiAgY29sb3I6IHdoaXRlO1xcclxcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcclxcbn1cXHJcXG5cXHJcXG4uaGVhZGxpbmVzIHtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcblxcclxcbiAgIGEge1xcclxcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcclxcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxuICAgIGhlaWdodDogMTAwdnc7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWZsb3c6IGNvbHVtbiB3cmFwO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcclxcblxcclxcbiAgfVxcclxcblxcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG5AbWVkaWEgYWxsIGFuZCAobWluLXdpZHRoOiA2MDBweCkge1xcclxcbiAgIFxcclxcbiAgLmhlYWRsaW5lcyB7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XFxyXFxuXFxyXFxuICAgIGEge1xcclxcbiAgICAgIGhlaWdodDogNTB2dztcXHJcXG4gICAgfVxcclxcbiAgfVxcclxcblxcclxcbn1cXHJcXG5cXHJcXG5AbWVkaWEgYWxsIGFuZCAobWluLXdpZHRoOiAxMDAwcHgpIHtcXHJcXG4gIC5oZWFkbGluZXMge1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyIDFmciAxZnI7XFxyXFxuXFxyXFxuICAgIGEge1xcclxcbiAgICAgIGhlaWdodDogMjV2dztcXHJcXG4gICAgfVxcclxcbiAgIFxcclxcblxcclxcbiAgfVxcclxcblxcclxcbn1cXHJcXG5cXHJcXG5cIixcImZvb3RlciB7ICBcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWZsb3c6IGNvbHVtbiB3cmFwO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgXFxyXFxufVxcclxcblxcclxcbmZvb3RlciBwIHtcXHJcXG4gIG1hcmdpbi10b3A6IDMwcHg7XFxyXFxuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xcclxcbiAgY29sb3I6ICNjMmMyYzI7XFxyXFxufVxcclxcblxcclxcbi5jb3B5cmlnaHQge1xcclxcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuQG1lZGlhIGFsbCBhbmQgKG1pbi13aWR0aDogMTAwMHB4KSB7XFxyXFxuICBcXHJcXG4gICAgZm9vdGVyIHtcXHJcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxyXFxuICAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxyXFxuICAgICAgbWFyZ2luLWxlZnQ6IDIwcHg7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG5cbi8vIGV4cG9ydHNcblxuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuXG5cbi8qKiovIH0pLFxuLyogNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24oc2VsZWN0b3IpIHtcblx0XHRpZiAodHlwZW9mIG1lbW9bc2VsZWN0b3JdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBmbi5jYWxsKHRoaXMsIHNlbGVjdG9yKTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAoc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3NlbGVjdG9yXSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1tzZWxlY3Rvcl1cblx0fTtcbn0pKGZ1bmN0aW9uICh0YXJnZXQpIHtcblx0cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KVxufSk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50byArIFwiIFwiICsgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdG9wdGlvbnMuYXR0cnMucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cblx0YWRkQXR0cnMobGluaywgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBsaW5rKTtcblxuXHRyZXR1cm4gbGluaztcbn1cblxuZnVuY3Rpb24gYWRkQXR0cnMgKGVsLCBhdHRycykge1xuXHRPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpO1xuXG5cdCAgICBpZiAocmVzdWx0KSB7XG5cdCAgICBcdC8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgdmFsdWUsIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgcnVubmluZyBydW50aW1lIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGUgY3NzLlxuXHQgICAgXHRvYmouY3NzID0gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgIFx0Ly8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3Ncblx0ICAgIFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdC8vIG5vb3Bcblx0ICAgIFx0fTtcblx0ICAgIH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuXG5cdFx0c3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XG5cblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuXG5cdH0gZWxzZSBpZiAoXG5cdFx0b2JqLnNvdXJjZU1hcCAmJlxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCJcblx0KSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cblx0XHRcdGlmKHN0eWxlLmhyZWYpIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZShvYmopO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7XG5cdFx0aWYgKG5ld09iaikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG5cdFx0XHRcdG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG5cdFx0XHRcdG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXBcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZW1vdmUoKTtcblx0XHR9XG5cdH07XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcblxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG5cblx0aWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG5cblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZSwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG5cblx0aWYobWVkaWEpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcblx0fVxuXG5cdGlmKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG5cdH0gZWxzZSB7XG5cdFx0d2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkge1xuXHRcdFx0c3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG5cdFx0fVxuXG5cdFx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHQvKlxuXHRcdElmIGNvbnZlcnRUb0Fic29sdXRlVXJscyBpc24ndCBkZWZpbmVkLCBidXQgc291cmNlbWFwcyBhcmUgZW5hYmxlZFxuXHRcdGFuZCB0aGVyZSBpcyBubyBwdWJsaWNQYXRoIGRlZmluZWQgdGhlbiBsZXRzIHR1cm4gY29udmVydFRvQWJzb2x1dGVVcmxzXG5cdFx0b24gYnkgZGVmYXVsdC4gIE90aGVyd2lzZSBkZWZhdWx0IHRvIHRoZSBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgb3B0aW9uXG5cdFx0ZGlyZWN0bHlcblx0Ki9cblx0dmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7XG5cblx0aWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7XG5cdFx0Y3NzID0gZml4VXJscyhjc3MpO1xuXHR9XG5cblx0aWYgKHNvdXJjZU1hcCkge1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xuXHR9XG5cblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XG5cblx0dmFyIG9sZFNyYyA9IGxpbmsuaHJlZjtcblxuXHRsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYykgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xufVxuXG5cbi8qKiovIH0pLFxuLyogNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcLykvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcblxuXG4vKioqLyB9KVxuLyoqKioqKi8gXSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGJ1aWxkL2J1bmRsZS5qcyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGRkMjVhYzgxMDNmNjhmODVhYjU0IiwiaW1wb3J0ICcuLi9zYXNzL3N0eWxlLnNjc3MnO1xyXG5cclxuJChmdW5jdGlvbiAoKSB7XHJcblxyXG4gIFxyXG5cclxuICAvLyBDaGFuZ2luZyBoZWFkZXIgc2l6ZSBvbiBtZW51IG9wdGlvbiBzZWxlY3RcclxuXHJcbiAgJCgnI21lbnUnKS5vbignY2hhbmdlJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdDtcclxuICAgICQoJ2hlYWRlcicpLmFkZENsYXNzKCdhZGQtcGhvdG9zJyk7XHJcbiAgICAkKCcuaGVhZGxpbmVzJykuZW1wdHkoKTtcclxuICAgICQoJy5sb2FkZXItZGl2JykuYXBwZW5kKCc8aW1nIGNsYXNzPVwibG9hZGVyXCIgc3JjPVwiYXNzZXRzL2ltYWdlcy9hamF4LWxvYWRlcjEuZ2lmXCI+Jyk7XHJcblxyXG4gIC8vIEdlbmVyYXRpbmcgQVBJIFVSTFxyXG5cclxuICAgIGxldCBzZWxlY3RlZCA9ICQoJyNtZW51IG9wdGlvbjpzZWxlY3RlZCcpLnZhbCgpO1xyXG4gICAgbGV0IHVybCA9ICdodHRwczovL2FwaS5ueXRpbWVzLmNvbS9zdmMvdG9wc3Rvcmllcy92Mi8nICsgc2VsZWN0ZWQgKyAnLmpzb24nO1xyXG4gICAgdXJsICs9ICc/JyArICQucGFyYW0oeyAnYXBpLWtleSc6ICcxZDNkNjdkMzdhZTI0YzRhODM1NDc5YTI4ODJjZDUxZCdcclxuXHJcbiAgICAvLyBsZXQgdXJsID0gYGh0dHBzOi8vYXBpLm55dGltZXMuY29tL3N2Yy90b3BzdG9yaWVzL3YyLyR7c2VsZWN0ZWR9Lmpzb24/JC5wYXJhbSh7ICdhcGkta2V5JzogJzFkM2Q2N2QzN2FlMjRjNGE4MzU0NzlhMjg4MmNkNTFkYFxyXG4gXHJcbiAgfSk7XHJcblxyXG4gIC8vIEZldGNoaW5nIENvbnRlbnRcclxuXHJcbiAgICAkLmFqYXgoe1xyXG4gICAgICB1cmw6IHVybCxcclxuICAgICAgbWV0aG9kOiAnR0VUJ1xyXG4gICAgfSlcclxuICAgICAgLmRvbmUoZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBkYXRhLnJlc3VsdHMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICBpZiAoaXRlbS5tdWx0aW1lZGlhLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KS5zcGxpY2UoMCwgMTIpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgIGxldCB0aXRsZSA9IGl0ZW0uYWJzdHJhY3Q7XHJcbiAgICAgICAgICBsZXQgaW1hZ2UgPSBpdGVtLm11bHRpbWVkaWFbaXRlbS5tdWx0aW1lZGlhLmxlbmd0aCAtIDFdLnVybDtcclxuICAgICAgICAgIGxldCB1cmwgPSBpdGVtLnVybDtcclxuICAgICAgICAgICQoJy5oZWFkbGluZXMnKS5hcHBlbmQoJzxhIGNsYXNzPVwiYW5jaG9yXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJyArIGltYWdlICsgJylcIiBocmVmPVwiJyArIHVybCArICdcIicgKyAnPicgKyAnPGRpdiBjbGFzcz1cImxpc3QtaW1hZ2VcIj4nICsgdGl0bGUgKyAnPC9kaXY+PC9hPicpO1xyXG5cclxuICAvLyBUb2dnbGVzIHZpc2liaWxpdHkgb2YgY2FwdGlvbnMgZm9yIGVhY2ggc3Rvcnkgb24gaG92ZXJcclxuXHJcbiAgICAgICAgICAkKCcuYW5jaG9yJykub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJCh0aGlzKS5jaGlsZHJlbigpLmNzcygndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgJCgnLmFuY2hvcicpLm9uKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkKHRoaXMpLmNoaWxkcmVuKCkuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9KTtcclxuICAgICAgfSlcclxuXHJcbiAgLy8gRXJyb3IgTWVzc2FnZVxyXG5cclxuICAgIC5mYWlsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgJCgnLmxvYWRlci1kaXYnKS5lbXB0eSgpO1xyXG4gICAgICAkKCcubG9hZGVyLWRpdicpLmFwcGVuZCgnPGgzPlNvcnJ5ISBUaGVyZSB3YXMgYSBwcm9ibGVtLCBwbGVhc2UgdHJ5IGFnYWluITwvaDM+Jyk7XHJcbiAgXHJcbiAgICB9KS5hbHdheXMoZnVuY3Rpb24gKCkgeyAgICAgIFxyXG4gICAgICAvLyAkKCcubG9hZGVyJykucmVtb3ZlKCk7XHJcbiAgICAgIFxyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIEluaXRpYWxpemUgU2VsZWN0cmljXHJcblxyXG4gICQoJ3NlbGVjdCcpLnNlbGVjdHJpYygpO1xyXG59KTtcclxuXHJcblxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9zY3JpcHQuanMiLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMi0xIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTItMiEuL3N0eWxlLnNjc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIFByZXBhcmUgY3NzVHJhbnNmb3JtYXRpb25cbnZhciB0cmFuc2Zvcm07XG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTItMSEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcz8/cmVmLS0yLTIhLi9zdHlsZS5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0yLTEhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tMi0yIS4vc3R5bGUuc2Nzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zYXNzL3N0eWxlLnNjc3Ncbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSh0cnVlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5zZWxlY3RyaWMtd3JhcHBlcntwb3NpdGlvbjpyZWxhdGl2ZTtjdXJzb3I6cG9pbnRlcn0uc2VsZWN0cmljLXJlc3BvbnNpdmV7d2lkdGg6MTAwJX0uc2VsZWN0cmlje2JvcmRlci1yYWRpdXM6NnB4O2JhY2tncm91bmQ6IzMzMzc0NTtwb3NpdGlvbjpyZWxhdGl2ZX0uc2VsZWN0cmljIC5sYWJlbHtkaXNwbGF5OmJsb2NrO3doaXRlLXNwYWNlOm5vd3JhcDtvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpczttYXJnaW46MCAzOHB4IDAgMTBweDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDozOHB4O2NvbG9yOiNmZmY7aGVpZ2h0OjM4cHh9LnNlbGVjdHJpYyAuYnV0dG9ue2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MDt0b3A6MDt3aWR0aDozOHB4O2hlaWdodDozOHB4O2NvbG9yOiNmZmY7dGV4dC1hbGlnbjpjZW50ZXI7Zm9udDowLzAgYTsqZm9udDoyMHB4LzM4cHggTHVjaWRhIFNhbnMgVW5pY29kZSxBcmlhbCBVbmljb2RlIE1TLEFyaWFsfS5zZWxlY3RyaWMgLmJ1dHRvbjphZnRlcntjb250ZW50OlxcXCIgXFxcIjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtyaWdodDowO2JvdHRvbTowO2xlZnQ6MDttYXJnaW46YXV0bzt3aWR0aDowO2hlaWdodDowO2JvcmRlcjo0cHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLXRvcC1jb2xvcjojZmZmO2JvcmRlci1ib3R0b206bm9uZX0uc2VsZWN0cmljLWZvY3VzIC5zZWxlY3RyaWN7YmFja2dyb3VuZDojMWQyMDI4fS5zZWxlY3RyaWMtaG92ZXIgLnNlbGVjdHJpY3tiYWNrZ3JvdW5kOiMyODJiMzZ9LnNlbGVjdHJpYy1ob3ZlciAuc2VsZWN0cmljIC5idXR0b257Y29sb3I6I2U2ZTZlNn0uc2VsZWN0cmljLWhvdmVyIC5zZWxlY3RyaWMgLmJ1dHRvbjphZnRlcntib3JkZXItdG9wLWNvbG9yOiNlNmU2ZTZ9LnNlbGVjdHJpYy1vcGVue3otaW5kZXg6OTk5OX0uc2VsZWN0cmljLW9wZW4gLnNlbGVjdHJpYy1pdGVtc3tkaXNwbGF5OmJsb2NrfS5zZWxlY3RyaWMtZGlzYWJsZWR7ZmlsdGVyOmFscGhhKG9wYWNpdHk9NTApO29wYWNpdHk6LjU7Y3Vyc29yOmRlZmF1bHQ7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfS5zZWxlY3RyaWMtaGlkZS1zZWxlY3R7cG9zaXRpb246cmVsYXRpdmU7b3ZlcmZsb3c6aGlkZGVuO3dpZHRoOjA7aGVpZ2h0OjB9LnNlbGVjdHJpYy1oaWRlLXNlbGVjdCBzZWxlY3R7cG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTAwJX0uc2VsZWN0cmljLWhpZGUtc2VsZWN0LnNlbGVjdHJpYy1pcy1uYXRpdmV7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTt6LWluZGV4OjEwfS5zZWxlY3RyaWMtaGlkZS1zZWxlY3Quc2VsZWN0cmljLWlzLW5hdGl2ZSBzZWxlY3R7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3JpZ2h0OjA7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJTtib3JkZXI6bm9uZTt6LWluZGV4OjE7Ym94LXNpemluZzpib3JkZXItYm94O29wYWNpdHk6MH0uc2VsZWN0cmljLWlucHV0e3Bvc2l0aW9uOmFic29sdXRlIWltcG9ydGFudDt0b3A6MCFpbXBvcnRhbnQ7bGVmdDowIWltcG9ydGFudDtvdmVyZmxvdzpoaWRkZW4haW1wb3J0YW50O2NsaXA6cmVjdCgwLDAsMCwwKSFpbXBvcnRhbnQ7bWFyZ2luOjAhaW1wb3J0YW50O3BhZGRpbmc6MCFpbXBvcnRhbnQ7d2lkdGg6MXB4IWltcG9ydGFudDtoZWlnaHQ6MXB4IWltcG9ydGFudDtvdXRsaW5lOm5vbmUhaW1wb3J0YW50O2JvcmRlcjpub25lIWltcG9ydGFudDsqZm9udDowLzAgYSFpbXBvcnRhbnQ7YmFja2dyb3VuZDpub25lIWltcG9ydGFudH0uc2VsZWN0cmljLXRlbXAtc2hvd3twb3NpdGlvbjphYnNvbHV0ZSFpbXBvcnRhbnQ7dmlzaWJpbGl0eTpoaWRkZW4haW1wb3J0YW50O2Rpc3BsYXk6YmxvY2shaW1wb3J0YW50fS5zZWxlY3RyaWMtaXRlbXN7ZGlzcGxheTpub25lO3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxMDAlO2xlZnQ6MDtiYWNrZ3JvdW5kOiMzMzM3NDU7Ym9yZGVyOjFweCBzb2xpZCAjYzRjNGM0O3otaW5kZXg6LTE7Ym94LXNoYWRvdzowIDAgMTBweCAtNnB4fS5zZWxlY3RyaWMtaXRlbXMgLnNlbGVjdHJpYy1zY3JvbGx7aGVpZ2h0OjEwMCU7b3ZlcmZsb3c6YXV0b30uc2VsZWN0cmljLWFib3ZlIC5zZWxlY3RyaWMtaXRlbXN7dG9wOmF1dG87Ym90dG9tOjEwMCV9LnNlbGVjdHJpYy1pdGVtcyBsaSwuc2VsZWN0cmljLWl0ZW1zIHVse2xpc3Qtc3R5bGU6bm9uZTtwYWRkaW5nOjA7bWFyZ2luOjA7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MjBweDttaW4taGVpZ2h0OjIwcHh9LnNlbGVjdHJpYy1pdGVtcyBsaXtkaXNwbGF5OmJsb2NrO3BhZGRpbmc6MTBweDtjb2xvcjojZmZmO2N1cnNvcjpwb2ludGVyfS5zZWxlY3RyaWMtaXRlbXMgbGkuc2VsZWN0ZWR7YmFja2dyb3VuZDojNWM1ZjZhO2NvbG9yOiNmZmZ9LnNlbGVjdHJpYy1pdGVtcyBsaS5oaWdobGlnaHRlZHtiYWNrZ3JvdW5kOiM0NzRiNTg7Y29sb3I6I2ZmZn0uc2VsZWN0cmljLWl0ZW1zIGxpOmhvdmVye2JhY2tncm91bmQ6IzcwNzM3ZDtjb2xvcjojZmZmfS5zZWxlY3RyaWMtaXRlbXMgLmRpc2FibGVke2ZpbHRlcjphbHBoYShvcGFjaXR5PTUwKTtvcGFjaXR5Oi41O2N1cnNvcjpkZWZhdWx0IWltcG9ydGFudDtiYWNrZ3JvdW5kOm5vbmUhaW1wb3J0YW50O2NvbG9yOiNmZmYhaW1wb3J0YW50fS5zZWxlY3RyaWMtaXRlbXMgLmRpc2FibGVkLC5zZWxlY3RyaWMtaXRlbXMgLnNlbGVjdHJpYy1ncm91cCAuc2VsZWN0cmljLWdyb3VwLWxhYmVsey13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZX0uc2VsZWN0cmljLWl0ZW1zIC5zZWxlY3RyaWMtZ3JvdXAgLnNlbGVjdHJpYy1ncm91cC1sYWJlbHtmb250LXdlaWdodDo3MDA7cGFkZGluZy1sZWZ0OjEwcHg7Y3Vyc29yOmRlZmF1bHQ7YmFja2dyb3VuZDpub25lO2NvbG9yOiNmZmZ9LnNlbGVjdHJpYy1pdGVtcyAuc2VsZWN0cmljLWdyb3VwLmRpc2FibGVkIGxpe2ZpbHRlcjphbHBoYShvcGFjaXR5PTEwMCk7b3BhY2l0eToxfS5zZWxlY3RyaWMtaXRlbXMgLnNlbGVjdHJpYy1ncm91cCBsaXtwYWRkaW5nLWxlZnQ6MjVweH1hLGFiYnIsYWNyb255bSxhZGRyZXNzLGFwcGxldCxhcnRpY2xlLGFzaWRlLGF1ZGlvLGIsYmlnLGJsb2NrcXVvdGUsYm9keSxjYW52YXMsY2FwdGlvbixjZW50ZXIsY2l0ZSxjb2RlLGRkLGRlbCxkZXRhaWxzLGRmbixkaXYsZGwsZHQsZW0sZW1iZWQsZmllbGRzZXQsZmlnY2FwdGlvbixmaWd1cmUsZm9vdGVyLGZvcm0saDEsaDIsaDMsaDQsaDUsaDYsaGVhZGVyLGhncm91cCxodG1sLGksaWZyYW1lLGltZyxpbnMsa2JkLGxhYmVsLGxlZ2VuZCxsaSxtYXJrLG1lbnUsbmF2LG9iamVjdCxvbCxvdXRwdXQscCxwcmUscSxydWJ5LHMsc2FtcCxzZWN0aW9uLHNtYWxsLHNwYW4sc3RyaWtlLHN0cm9uZyxzdWIsc3VtbWFyeSxzdXAsdGFibGUsdGJvZHksdGQsdGZvb3QsdGgsdGhlYWQsdGltZSx0cix0dCx1LHVsLHZhcix2aWRlb3ttYXJnaW46MDtwYWRkaW5nOjA7Ym9yZGVyOjA7Zm9udC1zaXplOjEwMCU7Zm9udDppbmhlcml0O3ZlcnRpY2FsLWFsaWduOmJhc2VsaW5lfWFydGljbGUsYXNpZGUsZGV0YWlscyxmaWdjYXB0aW9uLGZpZ3VyZSxmb290ZXIsaGVhZGVyLGhncm91cCxtZW51LG5hdixzZWN0aW9ue2Rpc3BsYXk6YmxvY2t9Ym9keXtsaW5lLWhlaWdodDoxfW9sLHVse2xpc3Qtc3R5bGU6bm9uZX1ibG9ja3F1b3RlLHF7cXVvdGVzOm5vbmV9YmxvY2txdW90ZTphZnRlcixibG9ja3F1b3RlOmJlZm9yZSxxOmFmdGVyLHE6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXCI7Y29udGVudDpub25lfXRhYmxle2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZTtib3JkZXItc3BhY2luZzowfUBmb250LWZhY2V7Zm9udC1mYW1pbHk6T3BlbiBTYW5zO3NyYzp1cmwoXFxcIi9hc3NldHMvZm9udHMvT3BlblNhbnMtTGlnaHQuZW90XFxcIik7c3JjOnVybChcXFwiL2Fzc2V0cy9mb250cy9PcGVuU2Fucy1MaWdodC5lb3Q/I2llZml4XFxcIikgZm9ybWF0KFxcXCJlbWJlZGRlZC1vcGVudHlwZVxcXCIpLHVybChcXFwiL2Fzc2V0cy9mb250cy9PcGVuU2Fucy1MaWdodC53b2ZmMlxcXCIpIGZvcm1hdChcXFwid29mZjJcXFwiKSx1cmwoXFxcIi9hc3NldHMvZm9udHMvT3BlblNhbnMtTGlnaHQud29mZlxcXCIpIGZvcm1hdChcXFwid29mZlxcXCIpLHVybChcXFwiL2Fzc2V0cy9mb250cy9PcGVuU2Fucy1MaWdodC50dGZcXFwiKSBmb3JtYXQoXFxcInRydWV0eXBlXFxcIiksdXJsKFxcXCIvYXNzZXRzL2ZvbnRzL09wZW5TYW5zLUxpZ2h0LnN2ZyNPcGVuU2Fucy1MaWdodFxcXCIpIGZvcm1hdChcXFwic3ZnXFxcIik7Zm9udC13ZWlnaHQ6MzAwO2ZvbnQtc3R5bGU6bm9ybWFsfUBmb250LWZhY2V7Zm9udC1mYW1pbHk6T3BlbiBTYW5zO3NyYzp1cmwoXFxcIi9hc3NldHMvZm9udHMvT3BlblNhbnNMaWdodC1JdGFsaWMuZW90XFxcIik7c3JjOnVybChcXFwiL2Fzc2V0cy9mb250cy9PcGVuU2Fuc0xpZ2h0LUl0YWxpYy5lb3Q/I2llZml4XFxcIikgZm9ybWF0KFxcXCJlbWJlZGRlZC1vcGVudHlwZVxcXCIpLHVybChcXFwiL2Fzc2V0cy9mb250cy9PcGVuU2Fuc0xpZ2h0LUl0YWxpYy53b2ZmMlxcXCIpIGZvcm1hdChcXFwid29mZjJcXFwiKSx1cmwoXFxcIi9hc3NldHMvZm9udHMvT3BlblNhbnNMaWdodC1JdGFsaWMud29mZlxcXCIpIGZvcm1hdChcXFwid29mZlxcXCIpLHVybChcXFwiL2Fzc2V0cy9mb250cy9PcGVuU2Fuc0xpZ2h0LUl0YWxpYy50dGZcXFwiKSBmb3JtYXQoXFxcInRydWV0eXBlXFxcIiksdXJsKFxcXCIvYXNzZXRzL2ZvbnRzL09wZW5TYW5zTGlnaHQtSXRhbGljLnN2ZyNPcGVuU2Fuc0xpZ2h0LUl0YWxpY1xcXCIpIGZvcm1hdChcXFwic3ZnXFxcIik7Zm9udC13ZWlnaHQ6MzAwO2ZvbnQtc3R5bGU6aXRhbGljfSp7Ym94LXNpemluZzpib3JkZXItYm94fS5tYWlue2Rpc3BsYXk6ZmxleDtmbGV4LWZsb3c6Y29sdW1uIHdyYXA7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7aGVpZ2h0OjUwMHB4O21hcmdpbjoyNXB4IGF1dG99Lm1haW4gaW1ne2hlaWdodDozMDBweH0uaW5zdHJ1Y3Rpb25ze21hcmdpbi10b3A6MjBweDt0ZXh0LWFsaWduOmNlbnRlcn0uaW5zdHJ1Y3Rpb25zIHB7cGFkZGluZy1ib3R0b206MTBweH0uYWRkLXBob3Rvc3tkaXNwbGF5OmZsZXg7ZmxleC1mbG93OmNvbHVtbiB3cmFwO2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO2hlaWdodDphdXRvO21hcmdpbjoxMHB4IGF1dG87dHJhbnNpdGlvbjphbGwgMXMgZWFzZS1pbi1vdXQgMHN9LmFkZC1waG90b3MgaW1ne2hlaWdodDoxNTBweH1AbWVkaWEgKG1pbi13aWR0aDo2MDBweCl7Lm1haW57ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczoxZnIgNWZyO21hcmdpbi1sZWZ0OjEzMHB4fS5pbnN0cnVjdGlvbnN7Z3JpZC1jb2x1bW46Mi8zO2Rpc3BsYXk6ZmxleDtmbGV4LWZsb3c6Y29sdW1uIHdyYXA7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7d2lkdGg6MTYwcHg7bWFyZ2luLWxlZnQ6NDBweH0uaW5zdHJ1Y3Rpb25zIHB7cGFkZGluZy1ib3R0b206MTBweH0uYWRkLXBob3Rvc3toZWlnaHQ6YXV0bzttYXJnaW46MTBweCBhdXRvO3BhZGRpbmctbGVmdDo0MHB4fS5hZGQtcGhvdG9zIGltZ3toZWlnaHQ6ODBweDttYXJnaW4tdG9wOjEwcHg7bWFyZ2luLWxlZnQ6MTAwcHh9fUBtZWRpYSAobWluLXdpZHRoOjEwMDBweCl7Lm1haW57ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczoxZnIgNWZyO21hcmdpbi1sZWZ0OjEwcHh9LmFkZC1waG90b3N7aGVpZ2h0OmF1dG87cGFkZGluZzowfS5hZGQtcGhvdG9zIGltZ3toZWlnaHQ6ODBweDttYXJnaW4tdG9wOjEwcHg7bWFyZ2luLWxlZnQ6MDttYXJnaW4tcmlnaHQ6MjBweH0uaW5zdHJ1Y3Rpb25ze2dyaWQtY29sdW1uOjIvMztkaXNwbGF5OmZsZXg7ZmxleC1mbG93OmNvbHVtbiB3cmFwO2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0O3dpZHRoOjE4MHB4O21hcmdpbi1sZWZ0OjMwcHg7cGFkZGluZy1sZWZ0OjMwcHh9fWJvZHl7Zm9udC1zaXplOjE2cHg7Y29sb3I6I2ZmZjtmb250LWZhbWlseTpPcGVuIFNhbnMsQXJpYWwsSGVsdmV0aWNhLHNhbnMtc2VyaWY7Zm9udC13ZWlnaHQ6MzAwO2JhY2tncm91bmQtY29sb3I6IzAwMH1zZWxlY3R7d2lkdGg6MTAwcHg7bWFyZ2luOjIwcHggYXV0b30ubG9hZGVyLWRpdntkaXNwbGF5OmZsZXg7ZmxleC1mbG93OnJvdyB3cmFwO2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5sb2FkZXJ7d2lkdGg6NTBweDtoZWlnaHQ6NTBweH1oM3tmb250LXN0eWxlOml0YWxpY30ubGlzdC1pbWFnZXtiYWNrZ3JvdW5kOnJnYmEoNTAsNTAsNTAsLjUpO2NvbG9yOiNmZmY7dmlzaWJpbGl0eTpoaWRkZW59LmhlYWRsaW5lc3t3aWR0aDoxMDAlfS5oZWFkbGluZXMgYXtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1zaXplOmNvdmVyO3RleHQtZGVjb3JhdGlvbjpub25lO2hlaWdodDoxMDB2dzt3aWR0aDoxMDAlO2Rpc3BsYXk6ZmxleDtmbGV4LWZsb3c6Y29sdW1uIHdyYXA7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kfUBtZWRpYSAobWluLXdpZHRoOjYwMHB4KXsuaGVhZGxpbmVze3dpZHRoOjEwMCU7ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczoxZnIgMWZyfS5oZWFkbGluZXMgYXtoZWlnaHQ6NTB2d319QG1lZGlhIChtaW4td2lkdGg6MTAwMHB4KXsuaGVhZGxpbmVze3dpZHRoOjEwMCU7ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczoxZnIgMWZyIDFmciAxZnJ9LmhlYWRsaW5lcyBhe2hlaWdodDoyNXZ3fX1mb290ZXJ7ZGlzcGxheTpmbGV4O2ZsZXgtZmxvdzpjb2x1bW4gd3JhcDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcn1mb290ZXIgcHttYXJnaW4tdG9wOjMwcHg7bWFyZ2luLWJvdHRvbTozMHB4O2NvbG9yOiNjMmMyYzJ9LmNvcHlyaWdodHt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9QG1lZGlhIChtaW4td2lkdGg6MTAwMHB4KXtmb290ZXJ7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7YWxpZ24taXRlbXM6ZmxleC1zdGFydDttYXJnaW4tbGVmdDoyMHB4fX1cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiRDovSWx5YSBNL0hUTUwgTGVhcm5pbmcvUkVEL1Byb2plY3QtMi9zYXNzL3Nhc3MvX3NlbGVjdHJpYy5zY3NzXCIsXCJEOi9JbHlhIE0vSFRNTCBMZWFybmluZy9SRUQvUHJvamVjdC0yL3Nhc3Mvc2Fzcy9fcmVzZXQuc2Nzc1wiLFwiRDovSWx5YSBNL0hUTUwgTGVhcm5pbmcvUkVEL1Byb2plY3QtMi9zYXNzL3Nhc3MvX2ZvbnRzLnNjc3NcIixcIkQ6L0lseWEgTS9IVE1MIExlYXJuaW5nL1JFRC9Qcm9qZWN0LTIvc2Fzcy9zYXNzL19nbG9iYWxzLnNjc3NcIixcIkQ6L0lseWEgTS9IVE1MIExlYXJuaW5nL1JFRC9Qcm9qZWN0LTIvc2Fzcy9zYXNzL19oZWFkZXIuc2Nzc1wiLFwiRDovSWx5YSBNL0hUTUwgTGVhcm5pbmcvUkVEL1Byb2plY3QtMi9zYXNzL3Nhc3MvX2NvbnRlbnQuc2Nzc1wiLFwiRDovSWx5YSBNL0hUTUwgTGVhcm5pbmcvUkVEL1Byb2plY3QtMi9zYXNzL3Nhc3MvX2Zvb3Rlci5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUdBLG1CQUNFLGtCQUNBLGNBQWUsQ0FDaEIsc0JBR0MsVUFBVyxDQUNaLFdBR0Msa0JBQ0EsbUJBQ0EsaUJBQWtCLENBS25CLGtCQUdDLGNBQ0EsbUJBQ0EsZ0JBQ0EsdUJBQ0EscUJBQ0EsZUFDQSxpQkFDQSxXQUNBLFdBQVksQ0FDYixtQkFHQyxjQUNBLGtCQUNBLFFBQ0EsTUFDQSxXQUNBLFlBQ0EsV0FDQSxrQkFDQSxXQUNBLENBQUEseURBQTZELENBQzlELHlCQUdDLFlBQ0Esa0JBQ0EsTUFDQSxRQUNBLFNBQ0EsT0FDQSxZQUNBLFFBQ0EsU0FDQSw2QkFDQSxzQkFDQSxrQkFBbUIsQ0FDcEIsNEJBR0Msa0JBQW1CLENBQ3BCLDRCQUdDLGtCQUFtQixDQUNwQixvQ0FHQyxhQUFjLENBQ2YsMENBR0Msd0JBQXlCLENBQzFCLGdCQUdDLFlBQWEsQ0FDZCxpQ0FHQyxhQUFjLENBQ2Ysb0JBR0MseUJBQ0EsV0FDQSxlQUNBLHlCQUNHLHNCQUNDLHFCQUNJLGdCQUFpQixDQUMxQix1QkFHQyxrQkFDQSxnQkFDQSxRQUNBLFFBQVMsQ0FDViw4QkFHQyxrQkFDQSxVQUFXLENBQ1osMkNBR0Msa0JBQ0EsV0FDQSxZQUNBLFVBQVcsQ0FDWixrREFH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QUFcIixcImZpbGVcIjpcInN0eWxlLnNjc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxcclxcbiAgU2VsZWN0cmljXFxyXFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xcclxcbi5zZWxlY3RyaWMtd3JhcHBlciB7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMtcmVzcG9uc2l2ZSB7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG59XFxyXFxuXFxyXFxuLnNlbGVjdHJpYyB7XFxyXFxuICBib3JkZXItcmFkaXVzOiA2cHg7XFxyXFxuICBiYWNrZ3JvdW5kOiAjMzMzNzQ1O1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgXFxyXFxuICAvLyBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDAwcHgpIHtcXHJcXG4gIC8vICAgbWFyZ2luOiAwIDUwcHg7XFxyXFxuICAvLyB9XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMgLmxhYmVsIHtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXHJcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXHJcXG4gIG1hcmdpbjogMCAzOHB4IDAgMTBweDtcXHJcXG4gIGZvbnQtc2l6ZTogMTJweDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAzOHB4O1xcclxcbiAgY29sb3I6ICNGRkY7XFxyXFxuICBoZWlnaHQ6IDM4cHg7XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMgLmJ1dHRvbiB7XFxyXFxuICBkaXNwbGF5OiBibG9jaztcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIHJpZ2h0OiAwO1xcclxcbiAgdG9wOiAwO1xcclxcbiAgd2lkdGg6IDM4cHg7XFxyXFxuICBoZWlnaHQ6IDM4cHg7XFxyXFxuICBjb2xvcjogI0ZGRjtcXHJcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gIGZvbnQ6IDAvMCBhO1xcclxcbiAgKmZvbnQ6IDIwcHgvMzhweCBMdWNpZGEgU2FucyBVbmljb2RlLCBBcmlhbCBVbmljb2RlIE1TLCBBcmlhbDtcXHJcXG59XFxyXFxuXFxyXFxuLnNlbGVjdHJpYyAuYnV0dG9uOmFmdGVyIHtcXHJcXG4gIGNvbnRlbnQ6IFxcXCIgXFxcIjtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIHRvcDogMDtcXHJcXG4gIHJpZ2h0OiAwO1xcclxcbiAgYm90dG9tOiAwO1xcclxcbiAgbGVmdDogMDtcXHJcXG4gIG1hcmdpbjogYXV0bztcXHJcXG4gIHdpZHRoOiAwO1xcclxcbiAgaGVpZ2h0OiAwO1xcclxcbiAgYm9yZGVyOiA0cHggc29saWQgdHJhbnNwYXJlbnQ7XFxyXFxuICBib3JkZXItdG9wLWNvbG9yOiAjRkZGO1xcclxcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLnNlbGVjdHJpYy1mb2N1cyAuc2VsZWN0cmljIHtcXHJcXG4gIGJhY2tncm91bmQ6ICMxZDIwMjg7XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMtaG92ZXIgLnNlbGVjdHJpYyB7XFxyXFxuICBiYWNrZ3JvdW5kOiAjMjgyYjM2O1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljLWhvdmVyIC5zZWxlY3RyaWMgLmJ1dHRvbiB7XFxyXFxuICBjb2xvcjogI2U2ZTZlNjtcXHJcXG59XFxyXFxuXFxyXFxuLnNlbGVjdHJpYy1ob3ZlciAuc2VsZWN0cmljIC5idXR0b246YWZ0ZXIge1xcclxcbiAgYm9yZGVyLXRvcC1jb2xvcjogI2U2ZTZlNjtcXHJcXG59XFxyXFxuXFxyXFxuLnNlbGVjdHJpYy1vcGVuIHtcXHJcXG4gIHotaW5kZXg6IDk5OTk7XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMtb3BlbiAuc2VsZWN0cmljLWl0ZW1zIHtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljLWRpc2FibGVkIHtcXHJcXG4gIGZpbHRlcjogYWxwaGEob3BhY2l0eT01MCk7XFxyXFxuICBvcGFjaXR5OiAwLjU7XFxyXFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxyXFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljLWhpZGUtc2VsZWN0IHtcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICB3aWR0aDogMDtcXHJcXG4gIGhlaWdodDogMDtcXHJcXG59XFxyXFxuXFxyXFxuLnNlbGVjdHJpYy1oaWRlLXNlbGVjdCBzZWxlY3Qge1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgbGVmdDogLTEwMCU7XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMtaGlkZS1zZWxlY3Quc2VsZWN0cmljLWlzLW5hdGl2ZSB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIGhlaWdodDogMTAwJTtcXHJcXG4gIHotaW5kZXg6IDEwO1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljLWhpZGUtc2VsZWN0LnNlbGVjdHJpYy1pcy1uYXRpdmUgc2VsZWN0IHtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIHRvcDogMDtcXHJcXG4gIGxlZnQ6IDA7XFxyXFxuICByaWdodDogMDtcXHJcXG4gIGhlaWdodDogMTAwJTtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgYm9yZGVyOiBub25lO1xcclxcbiAgei1pbmRleDogMTtcXHJcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICBvcGFjaXR5OiAwO1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljLWlucHV0IHtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZSAhaW1wb3J0YW50O1xcclxcbiAgdG9wOiAwICFpbXBvcnRhbnQ7XFxyXFxuICBsZWZ0OiAwICFpbXBvcnRhbnQ7XFxyXFxuICBvdmVyZmxvdzogaGlkZGVuICFpbXBvcnRhbnQ7XFxyXFxuICBjbGlwOiByZWN0KDAsIDAsIDAsIDApICFpbXBvcnRhbnQ7XFxyXFxuICBtYXJnaW46IDAgIWltcG9ydGFudDtcXHJcXG4gIHBhZGRpbmc6IDAgIWltcG9ydGFudDtcXHJcXG4gIHdpZHRoOiAxcHggIWltcG9ydGFudDtcXHJcXG4gIGhlaWdodDogMXB4ICFpbXBvcnRhbnQ7XFxyXFxuICBvdXRsaW5lOiBub25lICFpbXBvcnRhbnQ7XFxyXFxuICBib3JkZXI6IG5vbmUgIWltcG9ydGFudDtcXHJcXG4gICpmb250OiAwLzAgYSAhaW1wb3J0YW50O1xcclxcbiAgYmFja2dyb3VuZDogbm9uZSAhaW1wb3J0YW50O1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljLXRlbXAtc2hvdyB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGUgIWltcG9ydGFudDtcXHJcXG4gIHZpc2liaWxpdHk6IGhpZGRlbiAhaW1wb3J0YW50O1xcclxcbiAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDtcXHJcXG59XFxyXFxuXFxyXFxuLyogSXRlbXMgYm94ICovXFxyXFxuLnNlbGVjdHJpYy1pdGVtcyB7XFxyXFxuICBkaXNwbGF5OiBub25lO1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgdG9wOiAxMDAlO1xcclxcbiAgbGVmdDogMDtcXHJcXG4gIGJhY2tncm91bmQ6ICMzMzM3NDU7XFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCAjYzRjNGM0O1xcclxcbiAgei1pbmRleDogLTE7XFxyXFxuICBib3gtc2hhZG93OiAwIDAgMTBweCAtNnB4O1xcclxcblxcclxcbiAgLy8gQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAwMHB4KSB7XFxyXFxuICAvLyAgIG1hcmdpbi1sZWZ0OiA1MHB4O1xcclxcbiAgLy8gfVxcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljLWl0ZW1zIC5zZWxlY3RyaWMtc2Nyb2xsIHtcXHJcXG4gIGhlaWdodDogMTAwJTtcXHJcXG4gIG92ZXJmbG93OiBhdXRvO1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljLWFib3ZlIC5zZWxlY3RyaWMtaXRlbXMge1xcclxcbiAgdG9wOiBhdXRvO1xcclxcbiAgYm90dG9tOiAxMDAlO1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljLWl0ZW1zIHVsLCAuc2VsZWN0cmljLWl0ZW1zIGxpIHtcXHJcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbiAgbWFyZ2luOiAwO1xcclxcbiAgZm9udC1zaXplOiAxMnB4O1xcclxcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XFxyXFxuICBtaW4taGVpZ2h0OiAyMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljLWl0ZW1zIGxpIHtcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgcGFkZGluZzogMTBweDtcXHJcXG4gIGNvbG9yOiAjRkZGO1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljLWl0ZW1zIGxpLnNlbGVjdGVkIHtcXHJcXG4gIGJhY2tncm91bmQ6ICM1YzVmNmE7XFxyXFxuICBjb2xvcjogI0ZGRjtcXHJcXG59XFxyXFxuXFxyXFxuLnNlbGVjdHJpYy1pdGVtcyBsaS5oaWdobGlnaHRlZCB7XFxyXFxuICBiYWNrZ3JvdW5kOiAjNDc0YjU4O1xcclxcbiAgY29sb3I6ICNGRkY7XFxyXFxufVxcclxcblxcclxcbi5zZWxlY3RyaWMtaXRlbXMgbGk6aG92ZXIge1xcclxcbiAgYmFja2dyb3VuZDogIzcwNzM3ZDtcXHJcXG4gIGNvbG9yOiAjRkZGO1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljLWl0ZW1zIC5kaXNhYmxlZCB7XFxyXFxuICBmaWx0ZXI6IGFscGhhKG9wYWNpdHk9NTApO1xcclxcbiAgb3BhY2l0eTogMC41O1xcclxcbiAgY3Vyc29yOiBkZWZhdWx0ICFpbXBvcnRhbnQ7XFxyXFxuICBiYWNrZ3JvdW5kOiBub25lICFpbXBvcnRhbnQ7XFxyXFxuICBjb2xvcjogI0ZGRiAhaW1wb3J0YW50O1xcclxcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAgICAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLnNlbGVjdHJpYy1pdGVtcyAuc2VsZWN0cmljLWdyb3VwIC5zZWxlY3RyaWMtZ3JvdXAtbGFiZWwge1xcclxcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxyXFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxyXFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgYmFja2dyb3VuZDogbm9uZTtcXHJcXG4gIGNvbG9yOiAjRkZGO1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljLWl0ZW1zIC5zZWxlY3RyaWMtZ3JvdXAuZGlzYWJsZWQgbGkge1xcclxcbiAgZmlsdGVyOiBhbHBoYShvcGFjaXR5PTEwMCk7XFxyXFxuICBvcGFjaXR5OiAxO1xcclxcbn1cXHJcXG5cXHJcXG4uc2VsZWN0cmljLWl0ZW1zIC5zZWxlY3RyaWMtZ3JvdXAgbGkge1xcclxcbiAgcGFkZGluZy1sZWZ0OiAyNXB4O1xcclxcbn1cXHJcXG5cIixcIi8qIGh0dHA6Ly9tZXllcndlYi5jb20vZXJpYy90b29scy9jc3MvcmVzZXQvIFxcclxcbiAgIHYyLjAgfCAyMDExMDEyNlxcclxcbiAgIExpY2Vuc2U6IG5vbmUgKHB1YmxpYyBkb21haW4pXFxyXFxuKi9cXHJcXG5cXHJcXG5odG1sLCBib2R5LCBkaXYsIHNwYW4sIGFwcGxldCwgb2JqZWN0LCBpZnJhbWUsXFxyXFxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgYmxvY2txdW90ZSwgcHJlLFxcclxcbmEsIGFiYnIsIGFjcm9ueW0sIGFkZHJlc3MsIGJpZywgY2l0ZSwgY29kZSxcXHJcXG5kZWwsIGRmbiwgZW0sIGltZywgaW5zLCBrYmQsIHEsIHMsIHNhbXAsXFxyXFxuc21hbGwsIHN0cmlrZSwgc3Ryb25nLCBzdWIsIHN1cCwgdHQsIHZhcixcXHJcXG5iLCB1LCBpLCBjZW50ZXIsXFxyXFxuZGwsIGR0LCBkZCwgb2wsIHVsLCBsaSxcXHJcXG5maWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCxcXHJcXG50YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCxcXHJcXG5hcnRpY2xlLCBhc2lkZSwgY2FudmFzLCBkZXRhaWxzLCBlbWJlZCwgXFxyXFxuZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLCBcXHJcXG5tZW51LCBuYXYsIG91dHB1dCwgcnVieSwgc2VjdGlvbiwgc3VtbWFyeSxcXHJcXG50aW1lLCBtYXJrLCBhdWRpbywgdmlkZW8ge1xcclxcblxcdG1hcmdpbjogMDtcXHJcXG5cXHRwYWRkaW5nOiAwO1xcclxcblxcdGJvcmRlcjogMDtcXHJcXG5cXHRmb250LXNpemU6IDEwMCU7XFxyXFxuXFx0Zm9udDogaW5oZXJpdDtcXHJcXG5cXHR2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XFxyXFxufVxcclxcbi8qIEhUTUw1IGRpc3BsYXktcm9sZSByZXNldCBmb3Igb2xkZXIgYnJvd3NlcnMgKi9cXHJcXG5hcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLCBcXHJcXG5mb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtZW51LCBuYXYsIHNlY3Rpb24ge1xcclxcblxcdGRpc3BsYXk6IGJsb2NrO1xcclxcbn1cXHJcXG5ib2R5IHtcXHJcXG5cXHRsaW5lLWhlaWdodDogMTtcXHJcXG59XFxyXFxub2wsIHVsIHtcXHJcXG5cXHRsaXN0LXN0eWxlOiBub25lO1xcclxcbn1cXHJcXG5ibG9ja3F1b3RlLCBxIHtcXHJcXG5cXHRxdW90ZXM6IG5vbmU7XFxyXFxufVxcclxcbmJsb2NrcXVvdGU6YmVmb3JlLCBibG9ja3F1b3RlOmFmdGVyLFxcclxcbnE6YmVmb3JlLCBxOmFmdGVyIHtcXHJcXG5cXHRjb250ZW50OiAnJztcXHJcXG5cXHRjb250ZW50OiBub25lO1xcclxcbn1cXHJcXG50YWJsZSB7XFxyXFxuXFx0Ym9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXHJcXG5cXHRib3JkZXItc3BhY2luZzogMDtcXHJcXG59XFxyXFxuXFxyXFxuLyogRU5EIFJFU0VUICovXFxyXFxuXFxyXFxuXCIsXCIvKiBUaGlzIHN0eWxlc2hlZXQgZ2VuZXJhdGVkIGJ5IFRyYW5zZm9udGVyIChodHRwczovL3RyYW5zZm9udGVyLm9yZykgb24gT2N0b2JlciAxNiwgMjAxNyA3OjUyIFBNICovXFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuXFx0Zm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnO1xcclxcblxcdHNyYzogdXJsKCcvYXNzZXRzL2ZvbnRzL09wZW5TYW5zLUxpZ2h0LmVvdCcpO1xcclxcblxcdHNyYzogdXJsKCcvYXNzZXRzL2ZvbnRzL09wZW5TYW5zLUxpZ2h0LmVvdD8jaWVmaXgnKSBmb3JtYXQoJ2VtYmVkZGVkLW9wZW50eXBlJyksXFxyXFxuXFx0XFx0dXJsKCcvYXNzZXRzL2ZvbnRzL09wZW5TYW5zLUxpZ2h0LndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLFxcclxcblxcdFxcdHVybCgnL2Fzc2V0cy9mb250cy9PcGVuU2Fucy1MaWdodC53b2ZmJykgZm9ybWF0KCd3b2ZmJyksXFxyXFxuXFx0XFx0dXJsKCcvYXNzZXRzL2ZvbnRzL09wZW5TYW5zLUxpZ2h0LnR0ZicpIGZvcm1hdCgndHJ1ZXR5cGUnKSxcXHJcXG5cXHRcXHR1cmwoJy9hc3NldHMvZm9udHMvT3BlblNhbnMtTGlnaHQuc3ZnI09wZW5TYW5zLUxpZ2h0JykgZm9ybWF0KCdzdmcnKTtcXHJcXG5cXHRmb250LXdlaWdodDogMzAwO1xcclxcblxcdGZvbnQtc3R5bGU6IG5vcm1hbDtcXHJcXG59XFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuXFx0Zm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnO1xcclxcblxcdHNyYzogdXJsKCcvYXNzZXRzL2ZvbnRzL09wZW5TYW5zTGlnaHQtSXRhbGljLmVvdCcpO1xcclxcblxcdHNyYzogdXJsKCcvYXNzZXRzL2ZvbnRzL09wZW5TYW5zTGlnaHQtSXRhbGljLmVvdD8jaWVmaXgnKSBmb3JtYXQoJ2VtYmVkZGVkLW9wZW50eXBlJyksXFxyXFxuXFx0XFx0dXJsKCcvYXNzZXRzL2ZvbnRzL09wZW5TYW5zTGlnaHQtSXRhbGljLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLFxcclxcblxcdFxcdHVybCgnL2Fzc2V0cy9mb250cy9PcGVuU2Fuc0xpZ2h0LUl0YWxpYy53b2ZmJykgZm9ybWF0KCd3b2ZmJyksXFxyXFxuXFx0XFx0dXJsKCcvYXNzZXRzL2ZvbnRzL09wZW5TYW5zTGlnaHQtSXRhbGljLnR0ZicpIGZvcm1hdCgndHJ1ZXR5cGUnKSxcXHJcXG5cXHRcXHR1cmwoJy9hc3NldHMvZm9udHMvT3BlblNhbnNMaWdodC1JdGFsaWMuc3ZnI09wZW5TYW5zTGlnaHQtSXRhbGljJykgZm9ybWF0KCdzdmcnKTtcXHJcXG5cXHRmb250LXdlaWdodDogMzAwO1xcclxcblxcdGZvbnQtc3R5bGU6IGl0YWxpYztcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuXCIsXCIqIHtcXHJcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxufVxcclxcblwiLFwiXFxyXFxuLm1haW4ge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZmxvdzogY29sdW1uIHdyYXA7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICBoZWlnaHQ6IDUwMHB4O1xcclxcbiAgbWFyZ2luOiAyNXB4IGF1dG87XFxyXFxuXFxyXFxuICBpbWcge1xcclxcbiAgICBoZWlnaHQ6IDMwMHB4O1xcclxcbiAgfVxcclxcbn1cXHJcXG5cXHJcXG4uaW5zdHJ1Y3Rpb25zIHtcXHJcXG4gIG1hcmdpbi10b3A6IDIwcHg7XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuXFxyXFxuICAgcCB7XFxyXFxuICAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcXHJcXG4gICB9XFxyXFxufVxcclxcblxcclxcbi5hZGQtcGhvdG9zIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWZsb3c6IGNvbHVtbiB3cmFwO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgaGVpZ2h0OiBhdXRvO1xcclxcbiAgbWFyZ2luOiAxMHB4IGF1dG87XFxyXFxuICB0cmFuc2l0aW9uOiBhbGwgMXMgZWFzZS1pbi1vdXQgMHM7XFxyXFxuXFxyXFxuICBpbWcge1xcclxcbiAgICBoZWlnaHQ6IDE1MHB4O1xcclxcbiAgfVxcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG5AbWVkaWEgYWxsIGFuZCAobWluLXdpZHRoOiA2MDBweCkge1xcclxcbiAgXFxyXFxuICBcXHJcXG4gICAgLm1haW4ge1xcclxcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgNWZyOyAgICBcXHJcXG4gICAgICBtYXJnaW4tbGVmdDogMTMwcHg7XFxyXFxuICAgIH1cXHJcXG4gIFxcclxcbiAgICAuaW5zdHJ1Y3Rpb25zIHtcXHJcXG4gICAgICBncmlkLWNvbHVtbjogMiAvIDM7XFxyXFxuICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICBmbGV4LWZsb3c6IGNvbHVtbiB3cmFwO1xcclxcbiAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXHJcXG4gICAgICB3aWR0aDogMTYwcHg7XFxyXFxuICAgICAgbWFyZ2luLWxlZnQ6IDQwcHg7XFxyXFxuXFxyXFxuICAgICAgIHAge1xcclxcbiAgICAgICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xcclxcbiAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgXFxyXFxuICAgICAuYWRkLXBob3RvcyB7XFxyXFxuICAgICAgaGVpZ2h0OiBhdXRvO1xcclxcbiAgICAgIG1hcmdpbjogMTBweCBhdXRvO1xcclxcbiAgICAgIHBhZGRpbmctbGVmdDogNDBweDtcXHJcXG4gICAgXFxyXFxuICAgICAgaW1nIHtcXHJcXG4gICAgICAgIGhlaWdodDogODBweDtcXHJcXG4gICAgICAgIG1hcmdpbi10b3A6IDEwcHg7XFxyXFxuICAgICAgICBtYXJnaW4tbGVmdDogMTAwcHg7XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuICB9XFxyXFxuXFxyXFxuXFxyXFxuQG1lZGlhIGFsbCBhbmQgKG1pbi13aWR0aDogMTAwMHB4KSB7XFxyXFxuICBcXHJcXG4gIC5tYWluIHtcXHJcXG4gICAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDVmcjsgICAgXFxyXFxuICAgICAgbWFyZ2luLWxlZnQ6IDEwcHg7XFxyXFxuICB9XFxyXFxuXFxyXFxuICAuYWRkLXBob3RvcyB7XFxyXFxuICAgIGhlaWdodDogYXV0bztcXHJcXG4gICAgcGFkZGluZzogMDtcXHJcXG4gIFxcclxcbiAgICBpbWcge1xcclxcbiAgICAgIGhlaWdodDogODBweDtcXHJcXG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xcclxcbiAgICAgIG1hcmdpbi1sZWZ0OiAwO1xcclxcbiAgICAgIG1hcmdpbi1yaWdodDogMjBweDtcXHJcXG4gICAgfVxcclxcbiAgfVxcclxcblxcclxcblxcclxcbiAgLmluc3RydWN0aW9ucyB7XFxyXFxuICAgICAgZ3JpZC1jb2x1bW46IDIgLyAzO1xcclxcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgZmxleC1mbG93OiBjb2x1bW4gd3JhcDtcXHJcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxyXFxuICAgICAgd2lkdGg6IDE4MHB4O1xcclxcbiAgICAgIG1hcmdpbi1sZWZ0OiAzMHB4O1xcclxcbiAgICAgIHBhZGRpbmctbGVmdDogMzBweDsgXFxyXFxuICAgICAgXFxyXFxuICB9XFxyXFxuXFxyXFxufSAgXCIsXCJcXHJcXG5ib2R5IHtcXHJcXG4gIGZvbnQtc2l6ZTogMTZweDtcXHJcXG4gIGNvbG9yOiB3aGl0ZTtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJywgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXHJcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXHJcXG59XFxyXFxuXFxyXFxuc2VsZWN0IHtcXHJcXG4gIHdpZHRoOiAxMDBweDtcXHJcXG4gIG1hcmdpbjogMjBweCBhdXRvO1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG4ubG9hZGVyLWRpdiB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1mbG93OiByb3cgd3JhcDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLmxvYWRlciB7XFxyXFxuICB3aWR0aDogNTBweDtcXHJcXG4gIGhlaWdodDogNTBweDtcXHJcXG4gfVxcclxcblxcclxcbiBoMyB7XFxyXFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxyXFxufVxcclxcblxcclxcblxcclxcbi5saXN0LWltYWdlIHtcXHJcXG4gIGJhY2tncm91bmQ6ICRjYXB0aW9uQmFja2dyb3VuZDtcXHJcXG4gIGNvbG9yOiB3aGl0ZTtcXHJcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXHJcXG59XFxyXFxuXFxyXFxuLmhlYWRsaW5lcyB7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG5cXHJcXG4gICBhIHtcXHJcXG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXHJcXG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgICBoZWlnaHQ6IDEwMHZ3O1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1mbG93OiBjb2x1bW4gd3JhcDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXHJcXG5cXHJcXG4gIH1cXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuQG1lZGlhIGFsbCBhbmQgKG1pbi13aWR0aDogNjAwcHgpIHtcXHJcXG4gICBcXHJcXG4gIC5oZWFkbGluZXMge1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xcclxcblxcclxcbiAgICBhIHtcXHJcXG4gICAgICBoZWlnaHQ6IDUwdnc7XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIGFsbCBhbmQgKG1pbi13aWR0aDogMTAwMHB4KSB7XFxyXFxuICAuaGVhZGxpbmVzIHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmciAxZnIgMWZyO1xcclxcblxcclxcbiAgICBhIHtcXHJcXG4gICAgICBoZWlnaHQ6IDI1dnc7XFxyXFxuICAgIH1cXHJcXG4gICBcXHJcXG5cXHJcXG4gIH1cXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuXCIsXCJmb290ZXIgeyAgXFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1mbG93OiBjb2x1bW4gd3JhcDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIFxcclxcbn1cXHJcXG5cXHJcXG5mb290ZXIgcCB7XFxyXFxuICBtYXJnaW4tdG9wOiAzMHB4O1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcXHJcXG4gIGNvbG9yOiAjYzJjMmMyO1xcclxcbn1cXHJcXG5cXHJcXG4uY29weXJpZ2h0IHtcXHJcXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxyXFxufVxcclxcblxcclxcblxcclxcbkBtZWRpYSBhbGwgYW5kIChtaW4td2lkdGg6IDEwMDBweCkge1xcclxcbiAgXFxyXFxuICAgIGZvb3RlciB7XFxyXFxuICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcclxcbiAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcclxcbiAgICAgIG1hcmdpbi1sZWZ0OiAyMHB4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyP3tcInNvdXJjZU1hcFwiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/e1wic291cmNlTWFwXCI6dHJ1ZX0hLi9zYXNzL3N0eWxlLnNjc3Ncbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vW3NlbGVjdG9yXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZm4uY2FsbCh0aGlzLCBzZWxlY3Rvcik7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1tzZWxlY3Rvcl0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bc2VsZWN0b3JdXG5cdH07XG59KShmdW5jdGlvbiAodGFyZ2V0KSB7XG5cdHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldClcbn0pO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcblx0aWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8gKyBcIiBcIiArIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXG4vLyBtb2R1bGUgaWQgPSA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=